<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding World Without End</title>
  
  <subtitle>Peng Shang&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.psonlyweb.cn/"/>
  <updated>2022-03-25T07:50:32.000Z</updated>
  <id>http://blog.psonlyweb.cn/</id>
  
  <author>
    <name>Peng Shang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://blog.psonlyweb.cn/2022/03/25/数据库/</id>
    <published>2022-03-25T07:50:32.000Z</published>
    <updated>2022-03-25T07:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h3 id="Mysql-四大特性-ACID"><a href="#Mysql-四大特性-ACID" class="headerlink" title="Mysql 四大特性(ACID)"></a>Mysql 四大特性(ACID)</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p><h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>事务在完成时，必须使所有的数据都保持一致状态。在相关数据库中，所有规则都必须应用于事务的修改，以保持所有数据的完整性。事务结束时，所有的内部数据结构（如 B 树索引或双向链表）都必须是正确的。某些维护一致性的责任由应用程序开发人员承担，他们必须确保应用程序已强制所有已知的完整性约束。例如，当开发用于转帐的应用程序时，应避免在转帐过程中任意移动小数点。</p><h4 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h4><p>由并发事务所作的修改必须与任何其它并发事务所作的修改隔离。事务查看数据时数据所处的状态，要么是另一并发事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看中间状态的数据。这称为可串行性，因为它能够重新装载起始数据，并且重播一系列事务，以使数据结束时的状态与原始事务执行的状态相同。当事务可序列化时将获得最高的隔离级别。在此级别上，从一组可并行执行的事务获得的结果与通过连续运行每个事务所获得的结果相同。由于高度隔离会限制可并行执行的事务数，所以一些应用程序降低隔离级别以换取更大的吞吐量。</p><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。 </p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><h4 id="Read-Uncommitted（读取未提交内容）"><a href="#Read-Uncommitted（读取未提交内容）" class="headerlink" title="Read Uncommitted（读取未提交内容）"></a>Read Uncommitted（读取未提交内容）</h4><p> 在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。读取未提交的数据，也被称之为脏读（Dirty Read）。</p><h4 id="Read-Committed（读取提交内容）"><a href="#Read-Committed（读取提交内容）" class="headerlink" title="Read Committed（读取提交内容）"></a>Read Committed（读取提交内容）</h4><p>这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p><h4 id="Repeatable-Read（可重读）"><a href="#Repeatable-Read（可重读）" class="headerlink" title="Repeatable Read（可重读）"></a>Repeatable Read（可重读）</h4><p>这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。</p><h4 id="Serializable（可串行化）"><a href="#Serializable（可串行化）" class="headerlink" title="Serializable（可串行化）"></a>Serializable（可串行化）</h4><p>这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p><p><strong>这四种隔离级别采取不同的锁类型来实现，若读取的是同一个数据的话，就容易发生问题。例如</strong>：</p><ul><li>脏读(Drity Read)：某个事务已更新一份数据，另一个事务在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</li><li>不可重复读(Non-repeatable read):在一个事务的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。</li><li>幻读(Phantom Read):在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</li></ul><blockquote><p> 在MySQL中，实现了这四种隔离级别，分别有可能产生问题如下所示：</p></blockquote><table><thead><tr><th style="text-align:center">隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td style="text-align:center">Read Uncommitted（读取未提交内容）</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td></tr><tr><td style="text-align:center">Read Committed（读取提交内容）</td><td style="text-align:center">❌</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td></tr><tr><td style="text-align:center">Repeatable Read（可重读）</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">✔️</td></tr><tr><td style="text-align:center">Serializable（可串行化）</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td></tr></tbody></table><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>MVCC，全称 Multi-Version Concurrency Control ，即多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><p>地址：<a href="https://blog.csdn.net/SnailMann/article/details/94724197" target="_blank" rel="noopener">https://blog.csdn.net/SnailMann/article/details/94724197</a></p><p>什么是当前读和快照读？</p><ul><li><p><strong>当前读</strong><br>像 select lock in share mode (共享锁), select for update; update; insert; delete (排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</p></li><li><p><strong>快照读</strong><br>像不加锁的 select 操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即 MVCC ,可以认为 MVCC 是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</p><h4 id="MVCC-能解决什么问题，好处是？"><a href="#MVCC-能解决什么问题，好处是？" class="headerlink" title="MVCC 能解决什么问题，好处是？"></a>MVCC 能解决什么问题，好处是？</h4><p><strong>数据库并发场景有三种，分别为：</strong></p></li><li>读-读：不存在任何问题，也不需要并发控制</li><li>读-写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读</li><li>写-写：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失</li></ul><p><strong>好处</strong></p><ul><li>在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能</li><li>同时还可以解决脏读，幻读，不可重复读等事务隔离问题，但不能解决更新丢失问题</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>MVCC + 悲观锁<br>MVCC 解决读写冲突，悲观锁解决写写冲突<br>MVCC + 乐观锁<br>MVCC 解决读写冲突，乐观锁解决写写冲突</p><h3 id="一个SQL语句的执行过程"><a href="#一个SQL语句的执行过程" class="headerlink" title="一个SQL语句的执行过程"></a>一个SQL语句的执行过程</h3><p>客户端-连接器-查询缓存-分析器-优化器-执行器-存储引擎</p><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><h5 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h5><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><p>长连接是相对于短连接来说的。长连接指在一个连接上可以连续发送多个数据包，在连接保持期间，如果有数据包发送，需要双方发送链路检测包。mysql的长连接如果长期闲置，mysql会8小时后自动断开该连接。</p><h5 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h5><h6 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h6><p>是指双方有数据交互时，就建立一个连接，数据发送完成后，则断开此连接，即每次连接只完成一项业务的发送。</p><h5 id="短连接-VS-长连接"><a href="#短连接-VS-长连接" class="headerlink" title="短连接 VS 长连接"></a>短连接 VS 长连接</h5><ol><li>建立连接的过程是复杂的，在使用中尽量减少建立连接的操作，尽量使用长连接。</li><li>如果全部使用长连接，会导致Mysql内存涨的特别快，导致内存占用大，被系统强行杀掉了。</li></ol><h5 id="如何解决长连接"><a href="#如何解决长连接" class="headerlink" title="如何解决长连接"></a>如何解决长连接</h5><ol><li>定期断开长连接</li><li>执行一个比较大的操作后，通过执行mysql_reset_connection来初始化连接资源。这个过程不需要重新连接和权限验证。（mysql 5.7以上的版本）</li></ol><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><h5 id="查询缓存是什么"><a href="#查询缓存是什么" class="headerlink" title="查询缓存是什么"></a>查询缓存是什么</h5><p>SQL文本与查询结果的映射</p><h5 id="缓存条件"><a href="#缓存条件" class="headerlink" title="缓存条件"></a>缓存条件</h5><ol><li>查询SQL语句完全相同（空格和大小写严格校验）</li><li>开启查询缓存</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ps-blog.oss-cn-beijing.aliyuncs.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_529f4c91-2648-4c6b-bea8-adb7bd4d37d0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>query_cache_type 0 不使用查询缓存 1 始终使用查询缓存 2 按需使用查询缓存</p><p>1.query_cache_type值为1时，不想使用缓存中查询的数据</p><p>SELECT SQL_NO_CACHE * FROM my_table WHERE condition;</p><p>2.query_cache_type值为2，要使用缓存的话，需要使用SQL_CACHE开关参数：</p><p>SELECT SQL_CACHE * FROM my_table WHERE condition;</p><h5 id="缓存失效时机"><a href="#缓存失效时机" class="headerlink" title="缓存失效时机"></a>缓存失效时机</h5><p>在表结构或者数据发生改变时，查询的数据不再有效。（INSERT、UPDATE、DELETE、ALERT等）<br>Mysql8.0版本将查询缓存的整个模块删除。</p><h4 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h4><p>分为词法分析和语法分析<br>词法分析采用Lex词法分析器<br>Lex<br>Lex是Unix环境下非常著名的工具,主要功能是生成一个词法分析器(scanner)的C源码，描述规则采用正则表达式。</p><p>语法分析采用</p><p>yacc是一个典型的语法解析器。yacc生成的编译器主要是用C语言写成的语法解析器（Parser），需要与词法解析器Lex一起使用，再把两部份产生出来的C程序一并编译。</p><p>select id, name from table1 where id=1</p><p>语句被解析为</p><ol><li>sql_command = SQLCOM_SELECT</li><li>where子句 :select_lex-&gt;where</li><li>table列表：select_lex-&gt;table_list</li><li><p>字段列表：select_lex-&gt;item_list</p></li><li><p>table_list 保存表名</p></li><li>where<br>where<br>  |–&gt;FUNC_ITEM<pre><code>  |--&gt;FIELD_ITEM(&quot;id&quot;)  |--&gt;INT_ITEM(1)</code></pre></li><li><p>item_list</p><p>item_list:<br>  |–&gt;Item_field(“id”)<br>  |–&gt;Item_field(“name”)</p></li></ol><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><h5 id="优化步骤"><a href="#优化步骤" class="headerlink" title="优化步骤"></a>优化步骤</h5><ol><li>根据语法树及统计统计，构建初始表访问数组（init_plan_arrays）</li><li>根据表访问数组，计算每个表的最佳访问路径(find_best_ref)，同时保存当前最优执行计划（COST最小）</li><li>如果找到更优的执行计划则更新最优执行计划，否则优化结束。</li></ol><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p>select * from table1 join table2 using（id） where table1.c = 10 and table2.d = 20;</p><p>两种方案 </p><ol><li>从表1里面取出c=10的记录的ID值，再根据ID值关联到t2，再判断t2里面的d值是否等于20。</li><li>也可以先从表2中取出记录d=20的ID值，再根据ID值关联到t1，在判断t1的c值是否等于10。</li></ol><h3 id="InnoDB与MyISAM区别"><a href="#InnoDB与MyISAM区别" class="headerlink" title="InnoDB与MyISAM区别"></a>InnoDB与MyISAM区别</h3><p>地址：<a href="https://blog.csdn.net/qq_45076180/article/details/115111803" target="_blank" rel="noopener">https://blog.csdn.net/qq_45076180/article/details/115111803</a></p><h4 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h4><p>MyISAM无论是主键索引还是非主键索引都是非聚集索引（叶子节点不包含所有数据记录）,索引文件和数据文件是分离的，跨文件查询速度比较慢。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458424268425/16459310981194.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h4><p>InnoDB的主键索引就是聚集索引（叶子节点包含了完整的数据记录，查询速度较快），聚集索引在innoDB表中只有一个。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458424268425/16459319097177.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>InnoDB的非主键索引就是非聚集索引（叶子节点存储的是主键的id，用于回表查询，回表查询导致速度较慢）<br>非主键索引包括 二级索引、复合索引 等等<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458424268425/16459319787856.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="InnoDB与MyISAM的区别"><a href="#InnoDB与MyISAM的区别" class="headerlink" title="InnoDB与MyISAM的区别"></a>InnoDB与MyISAM的区别</h4><ol><li>InnoDB 支持事务，MyISAM 不支持。这是 MySQL 将默认存储引擎从 MyISAM 变成 InnoDB 的重要原因之一</li><li>InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限</li><li>InnoDB 是聚集索引，MyISAM 是非聚集索引</li><li>InnoDB 支持外键， MyISAM 不支持</li><li>InnoDB 不保存表的具体行数，执行 select count(*) from table 时需要全表扫描。而MyISAM 用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快</li></ol><h3 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h3><ol><li>非聚簇索引<ul><li style="list-style: none"><input type="checkbox"> Myisam 索引与数据的关系</li><li style="list-style: none"><input type="checkbox"> Myisam 索引指向行所在磁盘的位置</li><li style="list-style: none"><input type="checkbox"> 数据都有自己的地址</li><li style="list-style: none"><input type="checkbox"> 数据和索引相互独立</li></ul></li><li>聚簇索引<ul><li style="list-style: none"><input type="checkbox"> 主键索引 既存索引值，又在叶子中存储行的数据</li><li style="list-style: none"><input type="checkbox"> 如果没有主键（primary key），则会Unique key做主键</li><li style="list-style: none"><input type="checkbox"> 如果没有unique，则系统生成一个内部的rowid做主键</li><li style="list-style: none"><input type="checkbox"> 像innodb中，主键的索引结构中既存储了主键值，又存储了行数据的这样的结构c称为“聚簇索引”   </li></ul></li><li><p>聚簇索引和非聚簇索引的优缺点</p><p> 优势：根据主键查询条目比较少，不用回行(数据就在主键节点下)<br> 劣势: 如果碰到不规则数据插入时会造成频繁的页分裂。<br>####索引覆盖<br>索引覆盖是指查询的列恰好是索引的一部分，那么查询只需要在索引文件上进行，不需要回行到磁盘在查找数据，这样查询速度非常快</p></li></ol><h4 id="理想的索引"><a href="#理想的索引" class="headerlink" title="理想的索引"></a>理想的索引</h4><ol><li>查询频繁</li><li>区分度高</li><li>长度小</li><li>尽可能覆盖常用字段</li></ol><h3 id="Mysql建表、列选择注意点"><a href="#Mysql建表、列选择注意点" class="headerlink" title="Mysql建表、列选择注意点"></a>Mysql建表、列选择注意点</h3><h4 id="建表原则"><a href="#建表原则" class="headerlink" title="建表原则"></a>建表原则</h4><ol><li>定长与变长相分离</li><li>常用字段和不常用字段要分离</li><li>1对多，需要关联统计的字段上，添加冗余字段(空间和时间上的转换)</li></ol><h4 id="列选择原则"><a href="#列选择原则" class="headerlink" title="列选择原则"></a>列选择原则</h4><ol><li><p>字段类型优先级 整形 &gt; date,time &gt; enum,char &gt; varchar &gt; blob,text</p><blockquote><p>time 定长,运算快，节省空间,考虑时区，写sql时不方便 where &gt; ‘2005-10-12’;<br>enum 能起到约束值的目的，内部用整形来存储<br>char 定长 需要考虑字符集和(排序校对集)<br>varchar 不定长 要考虑字符集的转换与排序时校对集，速度慢<br>text/Blob 无法使用内存临时表（排序等操作只能在磁盘上进行）</p></blockquote></li><li><p>够用就行，不要慷慨</p><blockquote><p>原因：大的字段浪费内存，影响速度<br>以年龄为例，tinyint unsigned not null 可以存储255岁,足够使用 ,用int浪费了3个字节<br>以varchar(10) 和 varchar(300) 存储的内容相同，但是在表的联查上varchar(300)要花费更多的内存。</p></blockquote></li><li><p>尽量避免使用NULL</p><blockquote><p>原因：NULL 不利于索引 要用特殊字节来标注</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h1&gt;&lt;h3 id=&quot;Mysql-四大特性-ACID&quot;&gt;&lt;a href=&quot;#Mysql-四大特性-ACID&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/03/08/Go/"/>
    <id>http://blog.psonlyweb.cn/2022/03/08/Go/</id>
    <published>2022-03-08T10:47:20.000Z</published>
    <updated>2022-03-08T10:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><h4 id="Go协程简单用法"><a href="#Go协程简单用法" class="headerlink" title="Go协程简单用法"></a>Go协程简单用法</h4><p>对于IO密集型计算可以采用go协程进行处理，使用这三个协程的操作，同时处理可以有效降低耗时。</p><h4 id="go学习之-cas的理解"><a href="#go学习之-cas的理解" class="headerlink" title="go学习之- cas的理解"></a>go学习之- cas的理解</h4><p><a href="https://blog.csdn.net/chenxun_2010/article/details/103598252" target="_blank" rel="noopener">https://blog.csdn.net/chenxun_2010/article/details/103598252</a></p><h4 id="make和new的区别"><a href="#make和new的区别" class="headerlink" title="make和new的区别"></a>make和new的区别</h4><ol><li>new 和 make 都用于分配内存；</li><li>new 和 make 都是在堆上分配内存；</li><li>new 对指针类型分配内存，返回值是分配类型的指针，new不能直接对 slice 、map、channel 分配内存；</li><li>make 仅用于 slice、map和 channel 的初始化，返回值为类型本身，而不是指针；</li></ol><p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Go&quot;&gt;&lt;a href=&quot;#Go&quot; class=&quot;headerlink&quot; title=&quot;Go&quot;&gt;&lt;/a&gt;Go&lt;/h1&gt;&lt;h4 id=&quot;Go协程简单用法&quot;&gt;&lt;a href=&quot;#Go协程简单用法&quot; class=&quot;headerlink&quot; title=&quot;Go协程简单用法&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/03/06/%E6%9E%B6%E6%9E%84/"/>
    <id>http://blog.psonlyweb.cn/2022/03/06/架构/</id>
    <published>2022-03-06T03:57:42.000Z</published>
    <updated>2022-03-06T03:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h3 id="分布式系统CAP理论"><a href="#分布式系统CAP理论" class="headerlink" title="分布式系统CAP理论"></a>分布式系统CAP理论</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p><strong>Consistency 一致性</strong></p><p>一致性是因为多个数据拷贝下并发读写才有的问题，因此理解时一定要注意结合考虑多个数据拷贝下并发读写的场景。</p><p><strong>Availability 可用性</strong><br>可用性指“Reads and writes always succeed”，即服务在正常响应时间内一直可用。<br>好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。可用性通常情况下可用性和分布式数据冗余，负载均衡等有着很大的关联。</p><p><strong>Partition Tolerance分区容错性</strong><br>分区容错性指“the system continues to operate despite arbitrary message loss or failure of part of the system”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性或可用性的服务。</p><h4 id="CAP权衡"><a href="#CAP权衡" class="headerlink" title="CAP权衡"></a>CAP权衡</h4><ol><li>CA without P：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但其实分区不是你想不想的问题，而是始终会存在，因此CA的系统更多的是允许分区后各子系统依然保持CA。</li><li>CP without A：如果不要求A（可用），相当于每个请求都需要在Server之间强一致，而P（分区）会导致同步时间无限延长，如此CP也是可以保证的。很多传统的数据库分布式事务都属于这种模式。</li><li>AP wihtout C：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的NoSQL都属于此类。</li></ol><h3 id="Raft算法详解"><a href="#Raft算法详解" class="headerlink" title="Raft算法详解"></a>Raft算法详解</h3><h4 id="Raft算法概述"><a href="#Raft算法概述" class="headerlink" title="Raft算法概述"></a>Raft算法概述</h4><p>将一致性分解为多个子问题：Leader选举（Leader election）、日志同步（Log replication）、安全性（Safety）、日志压缩（Log compaction）、成员变更（Membership change。<br>Raft将系统中的角色分为领导者（Leader）、跟从者（Follower）和候选人（Candidate）：</p><p><strong>Leader：</strong>接受客户端请求，并向Follower同步请求日志，当日志同步到大多数节点上后告诉Follower提交日志。<br><strong>Follower：</strong>接受并持久化Leader同步的日志，在Leader告之日志可以提交之后，提交日志。<br><strong>Candidate：</strong>Leader选举过程中的临时角色。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16465347663850/16465359259203.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Raft要求系统在任意时刻最多只有一个Leader，正常工作期间只有Leader和Followers。</p><p>Raft算法角色状态转换如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16465347663850/16465360091263.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h4><p>Raft 使用心跳（heartbeat）触发Leader选举。当服务器启动时，初始化为Follower。Leader向所有Followers周期性发送heartbeat。如果Follower在选举超时时间内没有收到Leader的heartbeat，就会等待一段随机的时间后发起一次Leader选举。<br>Follower将其当前term加一然后转换为Candidate。它首先给自己投票并且给集群中的其他服务器发送 RequestVote RPC （RPC细节参见八、Raft算法总结）。结果有以下三种情况：</p><ul><li>赢得了多数的选票，成功选举为Leader；</li><li>收到了Leader的消息，表示有其它服务器已经抢先当选了Leader；</li><li>没有服务器赢得多数的选票，Leader选举失败，等待选举时间超时后发起下一次选举。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16465347663850/16465362373202.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul><h4 id="日志同步"><a href="#日志同步" class="headerlink" title="日志同步"></a>日志同步</h4><p>Leader选出后，就开始接收客户端的请求。Leader把请求作为日志条目（Log entries）加入到它的日志中，然后并行的向其他服务器发起 AppendEntries RPC （RPC细节参见八、Raft算法总结）复制日志条目。当这条日志被复制到大多数服务器上，Leader将这条日志应用到它的状态机并向客户端返回执行结果。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16465347663850/16465363763137.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>某些Followers可能没有成功的复制日志，Leader会无限的重试 AppendEntries RPC直到所有的Followers最终存储了所有的日志条目。</p><p>日志由有序编号（log index）的日志条目组成。每个日志条目包含它被创建时的任期号（term），和用于状态机执行的命令。如果一个日志条目被复制到大多数服务器上，就被认为可以提交（commit）了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16465347663850/16465364339204.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="基于Redis的实现方式"><a href="#基于Redis的实现方式" class="headerlink" title="基于Redis的实现方式"></a>基于Redis的实现方式</h4><p><strong>1、选用Redis实现分布式锁原因：</strong></p><ol><li>Redis有很高的性能； </li><li>Redis命令对此支持较好，实现起来比较方便</li></ol><p><strong>2、使用命令介绍：</strong></p><ol><li>SETNX</li><li>EXPIRE</li><li>DELETE<br>在使用Redis实现分布式锁的时候，主要就会使用到这三个命令。</li></ol><p><strong>3、实现思想：</strong></p><ol><li>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。</li><li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li><li>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放</li></ol><h4 id="基于数据库的实现方式"><a href="#基于数据库的实现方式" class="headerlink" title="基于数据库的实现方式"></a>基于数据库的实现方式</h4><p><strong>基于数据库的实现方式的核心思想是</strong>：<br>在数据库中创建一个表，表中包含方法名等字段，并在方法名字段上创建唯一索引，想要执行某个方法，就使用这个方法名向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。<br>使用基于数据库的这种实现方式很简单，但是对于分布式锁应该具备的条件来说，它有一些问题需要解决及优化：</p><ol><li>因为是基于数据库实现的，数据库的可用性和性能将直接影响分布式锁的可用性及性能，所以，数据库需要双机部署、数据同步、主备切换；</li><li>不具备可重入的特性，因为同一个线程在释放锁之前，行数据一直存在，无法再次成功插入数据，所以，需要在表中新增一列，用于记录当前获取到锁的机器和线程信息，在再次获取锁的时候，先查询表中机器和线程信息是否和当前机器和线程相同，若相同则直接获取锁；</li><li>没有锁失效机制，因为有可能出现成功插入数据后，服务器宕机了，对应的数据没有被删除，当服务恢复后一直获取不到锁，所以，需要在表中新增一列，用于记录失效时间，并且需要有定时任务清除这些失效的数据；</li><li>不具备阻塞锁特性，获取不到锁直接返回失败，所以需要优化获取逻辑，循环多次去获取。</li><li>在实施的过程中会遇到各种不同的问题，为了解决这些问题，实现方式将会越来越复杂；依赖数据库需要一定的资源开销，性能问题需要考虑。</li></ol><h4 id="基于ZooKeeper的实现方式"><a href="#基于ZooKeeper的实现方式" class="headerlink" title="基于ZooKeeper的实现方式"></a>基于ZooKeeper的实现方式</h4><p>ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一文件名。基于ZooKeeper实现分布式锁的步骤如下：</p><ol><li>创建一个目录mylock； </li><li>线程A想获取锁就在mylock目录下创建临时顺序节点； </li><li>获取mylock目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁； </li><li>线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点； </li><li>线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</li></ol><blockquote><p>优点：具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。<br>缺点：因为需要频繁的创建和删除节点，性能上不如Redis方式。</p></blockquote><h3 id="高并发下接口幂等性解决方案"><a href="#高并发下接口幂等性解决方案" class="headerlink" title="高并发下接口幂等性解决方案"></a>高并发下接口幂等性解决方案</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>在编程中.一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，“getUsername()和setTrue()”函数就是一个幂等函数. 更复杂的操作幂等保证是利用唯一交易号(流水号)实现.</p><h4 id="幂等性场景"><a href="#幂等性场景" class="headerlink" title="幂等性场景"></a>幂等性场景</h4><ol><li>查询操作：查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作；</li><li>删除操作：删除操作也是幂等的，删除一次和多次删除都是把数据删除。(注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个) ；</li><li><p>唯一索引：防止新增脏数据。比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建资金账户多个，那么给资金账户表中的用户ID加唯一索引，所以一个用户新增成功一个资金账户记录。要点：唯一索引或唯一组合索引来防止新增数据存在脏数据（当表存在唯一索引，并发时新增报错时，再查询一次就可以了，数据应该已经存在了，返回结果即可）；</p></li><li><p>token机制：防止页面重复提交。</p><ol><li>原理上通过session token来实现的(也可以通过redis来实现)。当客户端请求页面时，服务器会生成一个随机数Token，并且将Token放置到session当中，然后将Token发给客户端（一般通过构造hidden表单）。</li><li>下次客户端提交请求时，Token会随着表单一起提交到服务器端。</li><li>服务器端第一次验证相同过后，会将session中的Token值更新下，若用户重复提交，第二次的验证判断将失败，因为用户提交的表单中的Token没变，但服务器端session中Token已经改变了。</li></ol></li><li><p>悲观锁</p><ol><li>获取数据的时候加锁获取。select * from table_xxx where id=’xxx’ for update; 注意：id字段一定是主键或者唯一索引，不然是锁表，会死人的；悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用；</li></ol></li><li><p>乐观锁——乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。乐观锁的实现方式多种多样可以通过version或者其他状态条件：</p><ol><li>通过版本号实现update table_xxx set name=#name#,version=version+1 where version=#version#如下图(来自网上)；</li><li>通过条件限制 update table_xxx set avai_amount=avai_amount-#subAmount# where avai_amount-#subAmount# &gt;= 0要求：quality-#subQuality# &gt;= ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高；</li></ol></li><li><p>分布式锁</p><ol><li>如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)；</li></ol></li><li><p>select + insert</p><ol><li>并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，在进行业务处理，就可以了。注意：核心高并发流程不要用这种方法；</li></ol></li><li><p>状态机幂等</p><ol><li>在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助</li></ol></li><li><p>对外提供接口的api如何保证幂等</p><ol><li>如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号；source+seq在数据库里面做唯一索引，防止多次付款(并发时，只能处理一个请求) 。</li><li>重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h1&gt;&lt;h3 id=&quot;分布式系统CAP理论&quot;&gt;&lt;a href=&quot;#分布式系统CAP理论&quot; class=&quot;headerlink&quot; title=&quot;分布式系统
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/03/06/Redis/"/>
    <id>http://blog.psonlyweb.cn/2022/03/06/Redis/</id>
    <published>2022-03-06T03:16:48.000Z</published>
    <updated>2022-03-06T03:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h3 id="缓存穿透、缓存击穿、缓存雪崩"><a href="#缓存穿透、缓存击穿、缓存雪崩" class="headerlink" title="缓存穿透、缓存击穿、缓存雪崩"></a>缓存穿透、缓存击穿、缓存雪崩</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p><strong>描述：</strong></p><blockquote><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求。由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p></blockquote><p>在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p>如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。<br><strong>解决方案</strong><br><strong>接口层增加校验</strong>，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；<br>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p><strong>描述：</strong></p><blockquote><p>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p></blockquote><p><strong>解决方案</strong></p><ol><li>设置热点数据永远不过期。</li><li>接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些 服务  不可用时候，进行熔断，失败快速返回机制。</li><li>布隆过滤器。bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，</li><li>加互斥锁</li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p><strong>描述：</strong></p><blockquote><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，        缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p></blockquote><p><strong>解决方案：</strong></p><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</li><li>设置热点数据永远不过期。</li></ol><h4 id="Redis中connect与pconnect区别？"><a href="#Redis中connect与pconnect区别？" class="headerlink" title="Redis中connect与pconnect区别？"></a>Redis中connect与pconnect区别？</h4><p>1.首先先介绍下connect和pconnect的区别。<br>connect：脚本结束之后连接就释放了。</p><p>2.pconnect：脚本结束之后连接不释放，连接保持在php-fpm进程中。<br>所以使用pconnect代替connect，可以减少频繁建立redis连接的消耗。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h3 id=&quot;缓存穿透、缓存击穿、缓存雪崩&quot;&gt;&lt;a href=&quot;#缓存穿透、缓存击穿、缓存雪崩&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/03/06/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.psonlyweb.cn/2022/03/06/网络基础/</id>
    <published>2022-03-06T02:45:56.000Z</published>
    <updated>2022-03-06T02:45:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP滑动窗口"><a href="#TCP滑动窗口" class="headerlink" title="TCP滑动窗口"></a>TCP滑动窗口</h3><p>滑动窗口<br>tcp通过滑动窗口进行流量控制，所谓的窗口可以理解为接收端所能提供的缓冲区大小。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16458428879729.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>TCP是一个滑动窗口协议，即一个TCP连接的发送端在某个时刻能发多少数据是由滑动窗口控制的</p><p>滑动窗口示意图</p><p>RTT（Round trip time）<br>表示从发送端到接收端的一去一回需要的时间。</p><p>TCP在数据传输过程中会对RTT进行采样（即对发送的数据包及其ACK的时间差进行测量，并根据测量值更新RTT值）</p><p>RTO （Retransmission TimeOut）<br>发送数据包，启动重传定时器，重传定时器到期所花费的时间</p><p>TCP根据得到的RTT值更新RTO值，即Retransmission TimeOut，就是重传间隔，发送端对每个发出的数据包进行计时，如果在RTO时间内没有收到所发出的数据包的对应ACK，则任务数据包丢失，将重传数据。一般RTO值都比采样得到的RTT值要大。</p><h3 id="在面对未知的流量暴增，可以预先怎么处理"><a href="#在面对未知的流量暴增，可以预先怎么处理" class="headerlink" title="在面对未知的流量暴增，可以预先怎么处理"></a>在面对未知的流量暴增，可以预先怎么处理</h3><blockquote><p>大致为以下两种情况<br>　　1. 不可预测流量（网站被恶意刷量；CDN回源抓取数据；合作业务平台调取平台数据等）<br>　　2. 可预测流量（突然爆发的社会热点，营销活动的宣传；）</p></blockquote><h4 id="防止流量暴涨的预备方案"><a href="#防止流量暴涨的预备方案" class="headerlink" title="防止流量暴涨的预备方案"></a>防止流量暴涨的预备方案</h4><ol><li>通过压测，进行流量预估，流量基本上要在压测结果，压测得到的结果要达到设计流量 <em> 3（</em>4， * 5都可以）</li><li>降级方案，需要考虑业务场景，采用不同的降级方案，不能随意在业务主流程进行</li><li>限流方案：计数器、滑动窗口、漏桶</li></ol><blockquote><p>计数器</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16460267189859.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>计数器是一种比较简单的限流算法，用途比较广泛，在接口层面，很多地方使用这种方式限流。在一段时间内，进行计数，与阀值进行比较，到了时间临界点，将计数器清0。<br><strong>局限性：</strong><br>这里需要注意的是，存在一个时间临界点的问题。举个栗子，在12:01:00到12:01:58这段时间内没有用户请求，然后在12:01:59这一瞬时发出100个请求，OK，然后在12:02:00这一瞬时又发出了100个请求。这里你应该能感受到，在这个临界点可能会承受恶意用户的大量请求，甚至超出系统预期的承受。</p><blockquote><p>滑动窗口</p></blockquote><p>由于计数器存在临界点缺陷，后来出现了滑动窗口算法来解决<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16460268422121.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>局限性：</strong><br>滑动窗口的意思是说把固定时间片，进行划分，并且随着时间的流逝，进行移动，这样就巧妙的避开了计数器的临界点问题。也就是说这些固定数量的可以移动的格子，将会进行计数判断阀值，因此格子的数量影响着滑动窗口算法的精度</p><blockquote><p>漏桶</p></blockquote><p>虽然滑动窗口有效避免了时间临界点的问题，但是依然有时间片的概念，而漏桶算法在这方面比滑动窗口而言，更加先进。<br>有一个固定的桶，进水的速率是不确定的，但是出水的速率是恒定的，当水满的时候是会溢出的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16460271640922.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p><strong>局限性：</strong></p><p>生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。（有一点生产令牌，消费令牌的意味）<br>不论是对于令牌桶拿不到令牌被拒绝，还是漏桶的水满了溢出，都是为了保证大部分流量的正常使用，而牺牲掉了少部分流量，这是合理的，如果因为极少部分流量需要保证的话，那么就可能导致系统达到极限而挂掉，得不偿失。</p><h3 id="浏览器访问-www-baidu-com-的过程"><a href="#浏览器访问-www-baidu-com-的过程" class="headerlink" title="浏览器访问 www.baidu.com 的过程"></a>浏览器访问 www.baidu.com 的过程</h3><ol><li>浏览器向DNS服务器发出解析域名的请求；</li><li>DNS服务器将”www.baidu.com”域名解析为对应的IP地址，并返回给浏览器；</li><li>浏览器与百度服务器进行三次握手，建立TCP连接；</li><li>浏览器发出HTTP请求报文；</li><li>服务器回复HTTP响应报文；</li><li>浏览器解析响应报文，渲染HTML内容，并显示在页面上；</li><li>收发报文结束，释放TCP连接，执行四次挥手。</li></ol><h3 id="TCP三次握手-建立连接"><a href="#TCP三次握手-建立连接" class="headerlink" title="TCP三次握手 建立连接"></a>TCP三次握手 建立连接</h3><p>在TCP/IP协议中,TCP协议提供可靠的连接服务,采用三次握手建立一个连接.</p><p>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</p><p>SYN：同步序列编号(Synchronize Sequence Numbers)</p><p>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</p><p>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16458401256437.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><p>1.第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p><p>2.第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</p><p>3.第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p><p>4.第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1， Server进入CLOSED状态，完成四次挥手。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16458406664471.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h3><h4 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h4><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p><p><strong>Select、Poll与Epoll区别</strong></p><table><thead><tr><th style="text-align:center">\</th><th style="text-align:right">select</th><th style="text-align:center">poll</th><th style="text-align:center">epoll</th></tr></thead><tbody><tr><td style="text-align:center">支持最大连接数</td><td style="text-align:right">1024（x86） or 2048（x64）</td><td style="text-align:center">无上限</td><td style="text-align:center">无上限</td></tr><tr><td style="text-align:center">IO效率<span class="Apple-tab-span" style="white-space:pre"></span></td><td style="text-align:right">每次调用进行线性遍历，时间复杂度为O（N）</td><td style="text-align:center">每次调用进行线性遍历，时间复杂度为O（N）</td><td style="text-align:center"><div>使用“事件”通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到rdllist里面，这样epoll_wait返回的时候我们就拿到了就绪的fd。时间发复杂度O（1）</div></td></tr><tr><td style="text-align:center">fd拷贝</td><td style="text-align:right">每次select都拷贝<span class="Apple-tab-span" style="white-space:pre"></span></td><td style="text-align:center">每次poll都拷贝</td><td style="text-align:center"><div>调用epoll_ctl时拷贝进内核并由内核保存，之后每次epoll_wait不拷贝</div></td></tr></tbody></table><h1 id="Linux-IO模型"><a href="#Linux-IO模型" class="headerlink" title="Linux IO模型"></a>Linux IO模型</h1><p>网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。<br>常见的IO模型有阻塞、非阻塞、IO多路复用，异步</p><h3 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h3><p>同步阻塞 IO 模型是最常用的一个模型，也是最简单的模型。在linux中，默认情况下所有的socket都是blocking。它符合人们最常见的思考逻辑。阻塞就是进程 “被” 休息, CPU处理其它进程去了。</p><h3 id="同步非堵塞IO"><a href="#同步非堵塞IO" class="headerlink" title="同步非堵塞IO"></a>同步非堵塞IO</h3><p>同步非阻塞就是 “每隔一会儿瞄一眼进度条” 的轮询（polling）方式。</p><blockquote><p>对比同步阻塞IO<br>优点：能够在等待任务完成的时间里干其他活了（包括提交其他任务，也就是 “后台” 可以有多个任务在同时执行）。<br>缺点：任务完成的响应延迟增大了，因为每过一段时间才去轮询一次read操作，而任务可能在两次轮询之间的任意时间完成。这会导致整体数据吞吐量的降低。</p></blockquote><h4 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h4><p>一个在内存中运行的应用程序。每个进程都有自己独立的一块内存空间，一个进程可以有多个线程，比如在Windows系统中，一个运行的xx.exe就是一个进程。</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>进程中的一个执行任务（控制单元），负责当前进程中程序的执行。一个进程至少有一个线程，一个进程可以运行多个线程，多个线程可共享数据。</p><p>与进程不同的是同类的多个线程共享进程的堆和方法区资源，但每个线程有自己的程序计数器、虚拟机栈和本地方法栈，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。</p><h4 id="进程与线程的区别总结"><a href="#进程与线程的区别总结" class="headerlink" title="进程与线程的区别总结"></a>进程与线程的区别总结</h4><p>线程具有许多传统进程所具有的特征，故又称为轻型进程(Light—Weight Process)或进程元；而把传统的进程称为重型进程(Heavy—Weight Process)，它相当于只有一个线程的任务。在引入了线程的操作系统中，通常一个进程都有若干个线程，至少包含一个线程。</p><p><strong>根本区别</strong>：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位</p><p><strong>资源开销</strong>：每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小。</p><p><strong>包含关系</strong>：如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p><p><strong>内存分配</strong>：同一进程的线程共享本进程的地址空间和资源，而进程之间的地址空间和资源是相互独立的</p><p><strong>影响关系</strong>：一个进程崩溃后，在保护模式下不会对其他进程产生影响，但是一个线程崩溃整个进程都死掉。所以多进程要比多线程健壮。</p><p><strong>执行过程</strong>：每个独立的进程有程序运行的入口、顺序执行序列和程序出口。但是线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制，两者均可并发执行</p><h3 id="CPU密集型和IO密集型"><a href="#CPU密集型和IO密集型" class="headerlink" title="CPU密集型和IO密集型"></a>CPU密集型和IO密集型</h3><h4 id="CPU密集型"><a href="#CPU密集型" class="headerlink" title="CPU密集型"></a>CPU密集型</h4><p>CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作CPU读写IO(硬盘/内存)时，IO可以在很短的时间内完成，而CPU还有许多运算要处理，因此，CPU负载很高。</p><p>CPU密集表示该任务需要大量的运算，而没有阻塞，CPU一直全速运行。CPU密集任务只有在真正的多核CPU上才可能得到加速（通过多线程），而在单核CPU上，无论你开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就只有这么多。</p><p>CPU使用率较高（例如:计算圆周率、对视频进行高清解码、矩阵运算等情况）的情况下，通常，线程数只需要设置为CPU核心数的线程个数就可以了。 这一情况多出现在一些业务复杂的计算和逻辑处理过程中。比如说，现在的一些机器学习和深度学习的模型训练和推理任务，包含了大量的矩阵运算。</p><h4 id="IO密集型"><a href="#IO密集型" class="headerlink" title="IO密集型"></a>IO密集型</h4><p>IO密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等IO (硬盘/内存) 的读写操作，因此，CPU负载并不高。</p><p>密集型的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而程序的逻辑做得不是很好，没有充分利用处理器能力。</p><p>CPU 使用率较低，程序中会存在大量的 I/O 操作占用时间，导致线程空余时间很多，通常就需要开CPU核心数数倍的线程。</p><p>其计算公式为：IO密集型核心线程数 = CPU核数 / （1-阻塞系数）。</p><p>当线程进行 I/O 操作 CPU 空闲时，启用其他线程继续使用 CPU，以提高 CPU 的使用率。例如：数据库交互，文件上传下载，网络传输等。</p><h4 id="CPU密集型与IO密集型任务的使用说明"><a href="#CPU密集型与IO密集型任务的使用说明" class="headerlink" title="CPU密集型与IO密集型任务的使用说明"></a>CPU密集型与IO密集型任务的使用说明</h4><p>当线程等待时间所占比例越高，需要越多线程，启用其他线程继续使用CPU，以此提高CPU的利用率；<br>当线程CPU时间所占比例越高，需要越少的线程，通常线程数和CPU核数一致即可，这一类型在开发中主要出现在一些计算业务频繁的逻辑中。</p><h4 id="CPU密集型任务与IO密集型任务的区别"><a href="#CPU密集型任务与IO密集型任务的区别" class="headerlink" title="CPU密集型任务与IO密集型任务的区别"></a>CPU密集型任务与IO密集型任务的区别</h4><p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数，避免线程或进程的切换。</p><p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。<br>IO密集型任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。涉及到网络、磁盘IO的任务都是IO密集型任务，</p><p>对于IO密集型任务，线程数越多，CPU效率越高，但也有一个限度。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一个计算为主的应用程序（CPU密集型程序），多线程或多进程跑的时候，可以充分利用起所有的 CPU 核心数，比如说16核的CPU ，开16个线程的时候，可以同时跑16个线程的运算任务，此时是最大效率。但是如果线程数/进程数远远超出 CPU 核心数量，反而会使得任务效率下降，因为频繁的切换线程或进程也是要消耗时间的。因此对于 CPU 密集型的任务来说，线程数/进程数等于 CPU 数是最好的了。<br>如果是一个磁盘或网络为主的应用程序（IO密集型程序），一个线程处在 IO 等待的时候，另一个线程还可以在 CPU 里面跑，有时候 CPU 闲着没事干，所有的线程都在等着 IO，这时候他们就是同时的了，而单线程的话，此时还是在一个一个等待的。我们都知道IO的速度比</p><h3 id="https原理"><a href="#https原理" class="headerlink" title="https原理"></a>https原理</h3><h4 id="HTTP与HTTPS有什么区别？"><a href="#HTTP与HTTPS有什么区别？" class="headerlink" title="HTTP与HTTPS有什么区别？"></a>HTTP与HTTPS有什么区别？</h4><p>HTTPS和HTTP的区别主要如下：</p><ol><li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><h4 id="非对称加密方案"><a href="#非对称加密方案" class="headerlink" title="非对称加密方案"></a>非对称加密方案</h4><ol><li>某网站服务器拥有公钥A与对应的私钥A’；浏览器拥有公钥B与对应的私钥B’。</li><li>浏览器把公钥B明文传输给服务器。</li><li>服务器把公钥A明文给传输浏览器。</li><li>之后浏览器向服务器传输的内容都用公钥A加密，服务器收到后用私钥A’解密。由于只有服务器拥有私钥A’，所以能保证这条数据的安全。</li><li>同理，服务器向浏览器传输的内容都用公钥B加密，浏览器收到后用私钥B’解密。同上也可以保证这条数据的安全。</li></ol><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>数字签名的制作过程：</p><ol><li>CA机构拥有非对称加密的私钥和公钥。</li><li>CA机构对证书明文数据T进行hash。</li><li>对hash后的值用私钥加密，得到数字签名S。</li></ol><p>浏览器验证过程：</p><ol><li>拿到证书，得到明文T，签名S。</li><li>用CA机构的公钥对S解密（由于是浏览器信任的机构，所以浏览器保有它的公钥。详情见下文），得到S’。</li><li>用证书里指明的hash算法对明文T进行hash得到T’。</li><li>显然通过以上步骤，T’应当等于S‘，除非明文或签名被篡改。所以此时比较S’是否等于T’，等于则表明证书可信。</li></ol><h4 id="制作数字签名时需要hash一次？"><a href="#制作数字签名时需要hash一次？" class="headerlink" title="制作数字签名时需要hash一次？"></a>制作数字签名时需要hash一次？</h4><p>最显然的是性能问题，前面我们已经说了非对称加密效率较差，证书信息一般较长，比较耗时。而hash后得到的是固定长度的信息（比如用md5算法hash后可以得到固定的128位的值），这样加解密就快很多。</p><h4 id="每次进行HTTPS请求时都必须在SSL-TLS层（http的安全层）进行握手传输密钥吗？"><a href="#每次进行HTTPS请求时都必须在SSL-TLS层（http的安全层）进行握手传输密钥吗？" class="headerlink" title="每次进行HTTPS请求时都必须在SSL/TLS层（http的安全层）进行握手传输密钥吗？"></a>每次进行HTTPS请求时都必须在SSL/TLS层（http的安全层）进行握手传输密钥吗？</h4><p>服务器会为每个浏览器（或客户端软件）维护一个session ID，在TLS握手阶段传给浏览器，浏览器生成好密钥传给服务器后，服务器会把该密钥存到相应的session ID下，之后浏览器每次请求都会携带session ID，服务器会根据session ID找到相应的密钥并进行解密加密操作，这样就不必要每次重新制作、传输密钥了！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16458387775318/16459593650116.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="Linux根据文件路径查找索引节点"><a href="#Linux根据文件路径查找索引节点" class="headerlink" title="Linux根据文件路径查找索引节点"></a>Linux根据文件路径查找索引节点</h3><p>查找时，会遍历路径的过程中，会逐层地将各个路径组成部分解析成目录项对象。如果此目录项对象在目录项缓存中，则直接从缓存中获取；如果该目录项在缓存中不存在，则进行一次实际的读盘操作，从磁盘中读取该目录项所对应的索引节点。得到索引节点之后，则建立索引节点与该目录项的联系。如此循环，直到找到目标文件对于的目录项，也就找到了索引节点，而由索引节点找到对应的超级块对象，就可知道该文件所在的文件系统的类型。</p><h3 id="进程创建时文件的复制与共享"><a href="#进程创建时文件的复制与共享" class="headerlink" title="进程创建时文件的复制与共享"></a>进程创建时文件的复制与共享</h3><p>当一个进程系统调用fork()创建一个子进程时，fork()将调用内核函数do_fork()对父进程的进程控制块进行复制，并将这个副本作为子进程的控制块。如果父进程有已经打开的文件，那么子进程理所当然的按某种方式来继承这些文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络基础&quot;&gt;&lt;a href=&quot;#网络基础&quot; class=&quot;headerlink&quot; title=&quot;网络基础&quot;&gt;&lt;/a&gt;网络基础&lt;/h1&gt;&lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TC
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/03/01/%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.psonlyweb.cn/2022/03/01/算法/</id>
    <published>2022-03-01T05:24:34.000Z</published>
    <updated>2022-03-01T05:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>L、D、R分别表示遍历左子树、访问根结点和遍历右子树</p><ul><li>先序遍历：DLR</li><li>中序遍历：LDR</li><li>后序遍历：LRD</li></ul><blockquote><p>仅有前序和后序遍历，不能确定一个二叉树，必须有中序遍历的结果</p></blockquote><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ul><li>性质1：在二叉树中第 i 层的结点数最多为 2^i-1 （i ≥ 1）</li><li>性质2：高度为k的二叉树其结点总数最多为 2^k －1 （k ≥ 1）</li><li>性质3：对任意的非空二叉树 T ，如果叶结点的个数为n<sub>0</sub>，而其度为 2 的结点数为 n<sub>2</sub>，则： n<sub>0</sub> = n<sub>2</sub> + 1</li></ul><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p>深度为k，且有 2^k -1  个节点称之为 满二叉树；</p><ul><li>性质4：第i层上的节点数为 2^i -1 ；</li></ul><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p>深度为k，有n个节点的二叉树，当且仅当其每一个节点都与深度为k的满二叉树中，序号为1至n的节点对应时，称之为完全二叉树。</p><ul><li>性质5：对于具有n个结点的完全二叉树的高度为 log<sub>2</sub>^n +1：</li></ul><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>红黑树每个节点上只存一个数据，导致大数据量时高度太高，B-Tree为了优化数的高度，如图所示：每一层树高上存储多个节点，节点中的数据索引从左到右递增排列，这样每个节点区间（数据页）内又可以向下延伸新的节点区间（数据页）。这样每一层都可以放更多的索引元素，有效的降低了树的高度，B-Tree具有以下特点：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16457702860696/16458434010293.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ul><li>节点中的数据索引从左到右递增排列</li><li>所有索引节点上都存储数据，所有索引节点不重复</li></ul><h3 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16457702860696/16458435414826.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>B+Tree 作为 B-Tree的变种，有以下特点</p><ul><li>非叶子节点不存储data，只存储索引(冗余)，可以放更多的索引</li><li>叶子节点包含所有索引字段</li><li>节点中的数据索引从左到右递增排列，叶子节点用指针连接，提高区间访问的性能</li><li>B+Tree在查询数据时，也是从上往下查询的，首先第一次磁盘IO把B+Tree的第一层数据加载到内存中，然后通过算法找到找个要查的这个数据位于第一层的哪个区间（数据页），然后再进行一次磁盘IO把这个区间加载到内存，到这个区间中去找，以此类推。。。最终可找到想要的数据！mysql正是使用了B+Tree的数据结构，才可以支撑千万级的数据。</li></ul><h3 id="二叉树（先序、中序、后序遍历）"><a href="#二叉树（先序、中序、后序遍历）" class="headerlink" title="二叉树（先序、中序、后序遍历）"></a>二叉树（先序、中序、后序遍历）</h3><pre><code class="go">package mainimport &quot;fmt&quot;type Tree struct {    No    int    Left  *Tree    Right *Tree}func PreTree(node *Tree) {    if node != nil {        fmt.Printf(&quot;no:%d \n&quot;, node.No)        PreTree(node.Left)        PreTree(node.Right)    }}func InfixTree(node *Tree) {    if node != nil {        InfixTree(node.Left)        fmt.Printf(&quot;no:%d \n&quot;, node.No)        InfixTree(node.Right)    }}func AfterTree(node *Tree) {    if node != nil {        AfterTree(node.Left)        AfterTree(node.Right)        fmt.Printf(&quot;no:%d \n&quot;, node.No)    }}func buildTree(nums []int, l int, r int) *Tree {    if l &gt; r {        return nil    }    mid := (l + r) &gt;&gt; 1    node := &amp;Tree{nums[mid], nil, nil}    node.Left = buildTree(nums, l, mid-1)    node.Right = buildTree(nums, mid+1, r)    return node}func main() {    nums := []int{1, 2, 3}    root := buildTree(nums, 0, len(nums)-1)    fmt.Print(root.Left.No)    fmt.Print(root.Right.No)    //PreTree(root)    AfterTree(root)}</code></pre><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆通常是一个可以被看做一棵树的数组对象。堆的实现通过构造二叉堆（binary heap），实为二叉树的一种；</p><ul><li>任意节点小于（或大于）它的所有后裔，最小元（或最大元）在堆的根上（堆序性）。</li><li><strong>堆总是一棵完全树</strong>。即除了最底层，其他层的节点都被元素填满，且最底层尽可能地从左到右填入。<br>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</li></ul><p>通常堆是通过一维数组来实现的。在数组起始位置为1的情形中：</p><ul><li>父节点i的左子节点在位置 2 ×i ;</li><li>父节点i的右子节点在位置 2×i+1 ;</li><li>子节点i的父节点在位置 i÷2 ;</li></ul><h3 id="LRU缓存机制"><a href="#LRU缓存机制" class="headerlink" title="LRU缓存机制"></a>LRU缓存机制</h3><pre><code>package mainimport &quot;fmt&quot;type Node struct {    pre  *Node    next *Node    key  int    val  int}type lruCache struct {    cap      int    headNode *Node    tailNode *Node    nodeMap  map[int]*Node}func (l *lruCache) get(k int) int {    node := l.nodeMap[k]    if node == nil {        return -1    }    headNode := l.headNode    //将节点node的前驱结点和后继节点连接起来    node.pre.next = node.next    node.next.pre = node.pre    headNode.next.pre = node    node.next = headNode.next    headNode.next = node    node.pre = headNode    v := node.val    return v}func (l *lruCache) set(k, v int) {    node := l.nodeMap[k]    if node == nil {        if len(l.nodeMap) == l.cap {            lastNode := l.tailNode.pre            lastNode.pre.next = l.tailNode            l.tailNode.pre = lastNode.pre            lastNode.pre = nil            lastNode.next = nil            deleteKey := lastNode.key            delete(l.nodeMap, deleteKey)        }        newNode := &amp;Node{            pre:  l.headNode,            next: l.headNode.next,            key:  k,            val:  v,        }        l.headNode.next = newNode        l.headNode.next.pre = newNode        l.nodeMap[k] = newNode    } else {        node.val = v        //摘除node        node.pre.next = node.next        node.next.pre = node.pre        l.headNode.next.pre = node        l.headNode.next = node        node.pre = l.headNode        node.next = l.headNode.next    }}func main() {    head := &amp;Node{        pre:  nil,        next: nil,        key:  0,        val:  0,    }    tail := &amp;Node{        pre:  nil,        next: nil,        key:  0,        val:  0,    }    head.next = tail    tail.pre = head    lru := lruCache{        cap:      2,        headNode: head,        tailNode: tail,        nodeMap:  make(map[int]*Node),    }    lru.set(1, 1)    lru.set(2, 2)    re := lru.get(1)    fmt.Println(re) // 1    lru.set(3, 3)    re = lru.get(2)    fmt.Println(re) // -1    re = lru.get(3)    fmt.Println(re) // 3    lru.set(4, 4)    re = lru.get(1)    fmt.Println(re) // -1    re = lru.get(3)    fmt.Println(re) // 3    re = lru.get(4)    fmt.Println(re) // 4}</code></pre><p>经典链表<br><a href="https://www.cnblogs.com/huangliang-hb/p/10855558.html" target="_blank" rel="noopener">https://www.cnblogs.com/huangliang-hb/p/10855558.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;h2 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h2&gt;&lt;h3 id=&quot;二叉
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blog.psonlyweb.cn/2022/02/27/kafka/"/>
    <id>http://blog.psonlyweb.cn/2022/02/27/kafka/</id>
    <published>2022-02-27T11:55:12.000Z</published>
    <updated>2022-02-27T11:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h3 id="Topic和Partition"><a href="#Topic和Partition" class="headerlink" title="Topic和Partition"></a>Topic和Partition</h3><h4 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h4><p>在 kafka 中，topic 是一个存储消息的逻辑概念，可以认为是一个消息集合。每条消息发送到 kafka 集群的消息都有一个类别。物理上来说，不同的 topic 的消息是分开存储的，每个 topic 可以有多个生产者向它发送消息，也可以有多个消费者去消费其中的消息。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16459617429777/16459617859027.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="Partition："><a href="#Partition：" class="headerlink" title="Partition："></a>Partition：</h4><p>每个 topic 可以划分多个分区（每个 Topic 至少有一个分区），同一 topic 下的不同分区包含的消息是不同的。每个消息在被添加到分区时，都会被分配一个 offset（称之为偏移量），它是消息在此分区中的唯一编号，kafka 通过 offset保证消息在分区内的顺序，offset 的顺序不跨分区，即 kafka只保证在同一个分区内的消息是有序的。下图中，对于名字为 test 的 topic，做了 3 个分区，分别是p0、p1、p2.</p><p>➢ 每一条消息发送到 broker 时，会根据 partition 的规则选择存储到哪一个 partition。如果 partition 规则设置合理，那么所有的消息会均匀的分布在不同的partition中，这样就有点类似数据库的分库分表的概念，把数据做了分片处理。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16459617429777/16459618684935.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="kafka-消息分发策略："><a href="#kafka-消息分发策略：" class="headerlink" title="kafka 消息分发策略："></a>kafka 消息分发策略：</h4><p>　　消息是 kafka 中最基本的数据单元，在 kafka 中，一条消息由 key、value 两部分构成，在发送一条消息时，我们可以指定这个 key，那么 producer 会根据 key 和 partition 机制来判断当前这条消息应该发送并存储到哪个 partition 中。我们可以根据需要进行扩展 producer 的 partition 机制　　</p><h4 id="消息默认的分发机制："><a href="#消息默认的分发机制：" class="headerlink" title="消息默认的分发机制："></a>消息默认的分发机制：</h4><p>　　默认情况下，kafka 采用的是 hash 取模的分区算法。如果Key 为 null，则会随机分配一个分区。这个随机是在这个参数”metadata.max.age.ms”的时间范围内随机选择一个。对于这个时间段内，如果 key 为 null，则只会发送到唯一的分区。这个值在默认情况下是 10 分钟更新一次。关 于 Metadata ，简单理解就是Topic/Partition 和 broker 的映射关系，每一个 topic 的每一个 partition，需要知道对应的 broker 列表是什么，leader是谁、follower 是谁。这些信息都是存储在 Metadata 这个类里面。　　</p><h4 id="谁来执行-Rebalance-以及管理-consumer-的-group-呢？"><a href="#谁来执行-Rebalance-以及管理-consumer-的-group-呢？" class="headerlink" title="谁来执行 Rebalance 以及管理 consumer 的 group 呢？"></a>谁来执行 Rebalance 以及管理 consumer 的 group 呢？</h4><p>Kafka 提供了一个角色：coordinator(协调员) 来执行对于 consumer group 的管理，当 consumer group 的第一个 consumer 启动的时候，它会去和 kafka server(broker) 确定谁是它们组的 coordinator。之后该 group 内的所有成员都会和该 coordinator 进行协调通信。consumer group 如何确定自己的 coordinator 是谁呢？ 消费 者 向 kafka 集 群 中 的 任 意 一 个 broker 发 送 一 个GroupCoordinatorRequest 请求，服务端会返回一个负载最小的 broker 节 点 的 id ， 并 将 该 broker 设 置 为coordinator。在 rebalance 之前，需要保证 coordinator 是已经确定好了的，整个 rebalance 的过程分为两个步骤 ，一个是JoinGroup 的过程，在这个过程之后会进入一个Synchronizing Group State 阶段。那么这两个阶段都做了什么呢？</p><p><strong>JoinGroup 的过程：</strong><br>　　表示加入到 consumer group 中，在这一步中，所有的成员都会向 coordinator 发送 joinGroup 的请求。一旦所有成员都发送了 joinGroup 请求，那么 coordinator 会选择一个 consumer 担任 leader 角色，并把组成员信息和订阅信息发送消费者。下图就是描述了这么一个过程，并且请求与响应中携带的一些重要的信息。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16459617429777/16459623765800.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><ul><li>　protocol_metadata: 序列化后的消费者的订阅信息</li><li>leader_id： 消费组中的消费者，coordinator 会选择一个座位 leader，对应的就是 member_id</li><li>member_metadata 对应消费者的订阅信息</li><li>members：consumer group 中全部的消费者的订阅信息</li><li>generation_id：年代信息，类似于 zookeeper 的时候的 epoch 是一样的，对于每一轮 rebalance ，generation_id 都会递增。主要用来保护 consumer group。隔离无效的 offset 提交。也就是上一轮的consumer 成员无法提交 offset 到新的 consumer group 中。</li></ul><p><strong>Synchronizing Group State 阶段：</strong><br>进入了 Synchronizing Group State阶段，主要逻辑是向 GroupCoordinator 发 送SyncGroupRequest 请求，并且处理 SyncGroupResponse响应，简单来说，就是 leader 将消费者对应的 partition 分配方案同步给 consumer group 中的所有 consumer，每个消费者都会向 coordinator 发送 syncgroup 请求，不过只有 leader 节点会发送分配方案，其他消费者只是打打酱油而已。当 leader 把方案发给 coordinator 以后，coordinator 会把结果设置到 SyncGroupResponse 中。这样所有成员都知道自己应该消费哪个分区。</p><h4 id="消息的存储："><a href="#消息的存储：" class="headerlink" title="消息的存储："></a>消息的存储：</h4><p>首先我们需要了解的是，kafka 是使用日志文件的方式来保存生产者和发送者的消息，每条消息都有一个 offset 值来表示它在分区中的偏移量。Kafka 中存储的一般都是海量的消息数据，为了避免日志文件过大，Log 并不是直接对应在一个磁盘上的日志文件，而是对应磁盘上的一个目录，这个目录的命名规则是<topic_name>_<partition_id>比如创建一个名为 firstTopic 的 topic，其中有 3 个 partition，那么在 kafka 的数据目录（/tmp/kafka-log，这里可以通过server.properties中的log.dirs=/tmp/kafka-logs去修改）中就有 3 个目录，firstTopic-0~3多个分区在集群中的分配 如果我们对于一个 topic，在集群中创建多个 partition，那么 partition 是如何分布的呢？</partition_id></topic_name></p><p>1.将所有 N Broker 和待分配的 i 个 Partition 排序<br>2.将第 i 个 Partition 分配到第(i mod n)个 Broker 上</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/16459617429777/16459629045157.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性:"></a>幂等性:</h4><p>　　所谓的幂等，简单说就是对接口的多次调用所产生的结果和调用一次是一致的。在0.11.0.0版本引入了创建幂等性Producer的功能。仅需要设置props.put(“enable.idempotence”，true)，或props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,true)。enable.idempotence设置成true后，Producer自动升级成幂等性Producer。Kafka会自动去重。Broker会多保存一些字段。当Producer发送了相同字段值的消息后，Broker能够自动知晓这些消息已经重复了。作用范围：</p><p>只能保证单分区上的幂等性，即一个幂等性Producer能够保证某个主题的一个分区上不出现重复消息。<br>只能实现单回话上的幂等性，这里的会话指的是Producer进程的一次运行。当重启了Producer进程之后，幂等性不保证。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kafka&quot;&gt;&lt;a href=&quot;#Kafka&quot; class=&quot;headerlink&quot; title=&quot;Kafka&quot;&gt;&lt;/a&gt;Kafka&lt;/h1&gt;&lt;h3 id=&quot;Topic和Partition&quot;&gt;&lt;a href=&quot;#Topic和Partition&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何发现代码的坏味道之SLAP原则</title>
    <link href="http://blog.psonlyweb.cn/2019/03/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%B8%80%E6%8A%BD%E8%B1%A1%E5%B1%82%E7%BA%A7%E5%8E%9F%E5%88%99-SLAP/"/>
    <id>http://blog.psonlyweb.cn/2019/03/22/设计模式/单一抽象层级原则-SLAP/</id>
    <published>2019-03-22T06:28:42.000Z</published>
    <updated>2019-03-22T07:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Long-Method-代码的坏味道"><a href="#Long-Method-代码的坏味道" class="headerlink" title="Long Method (代码的坏味道)"></a>Long Method (代码的坏味道)</h2><ul><li>可读性很差</li><li>复用性差</li><li>难以调试</li><li>难以维护</li><li>冗余代码多</li></ul><h2 id="SLAP-单一抽象原则"><a href="#SLAP-单一抽象原则" class="headerlink" title="SLAP(单一抽象原则)"></a>SLAP(单一抽象原则)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>SLAP 是 Single Level of Abstraction 的缩写。解释：指定代码块上的代码应该在单一的抽象层上。</p><h2 id="SLAP优势"><a href="#SLAP优势" class="headerlink" title="SLAP优势"></a>SLAP优势</h2><ul><li>短方法的提取产生，会使得方法更加具有原子性，职责更加单一，更加的符合Unix的哲学 Do one thing, and do it well。</li><li>短方法的复用性更强，使得编码更加便捷</li><li>短方法可读性更强，更加便于理解</li><li>实践表明，SLAP应用后，维护成本应该是降低的。</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre><code>&lt;?php   class User {      public static function getUserInfo() {          return [              &#39;email&#39; =&gt; &#39;786188095@qq.com&#39;,              &#39;password&#39; =&gt; &#39;232321312312&#39;          ];      }  }  function validateUser($user_info) {      $preg_email=&#39;/^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+)*@([a-zA-Z0-9]+[-.])+([a-z]{2,5})$/ims&#39;;      if (!preg_match($preg_email,$user_info[&#39;email&#39;])) {          return false;      }      if (strlen($user_info[&#39;password&#39;]) &lt;= 6) {          return false;      }       //验证用户名 不包含特殊符号      //验证银行卡号      //验证银行卡开户行信息      //以此类推 方法越来越长    }  validateUser(User::getUserInfo());</code></pre><p>代码存在的问题</p><ul><li>validateUser 方法中暴露了校验email和密码的具体实现 </li><li>validateUser 方法应该只关心校验结果（第一层抽象），而不是具体实现（第二层抽象）</li><li>validateUser 违反了SLAP原则</li></ul><p>修改后</p><pre><code>&lt;?php   class User {      public static function getUserInfo() {          return [              &#39;email&#39; =&gt; &#39;786188095@qq.com&#39;,              &#39;password&#39; =&gt; &#39;232321312312&#39;          ];      }  }  class UserValidator {       protected static $preg_email = &#39;/^[a-zA-Z0-9]+([-_.][a-zA-Z0-9]+)*@([a-zA-Z0-9]+[-.])+([a-z]{2,5})$/ims&#39;;       public static function validateEmail($email) {           if (!preg_match(self::$preg_email,$email)) {              return false;          }          return true;       }       public static function validatePassWord($password) {           if (strlen($password) &lt;= 6) {              return false;          }           return true;       }  }  function vailUserInfo($user_info) {      return UserValidator::validateEmail($user_info[&#39;email&#39;]) &amp;&amp; UserValidator::validatePassWord($user_info[&#39;password&#39;]);  }  var_dump(vailUserInfo(User::getUserInfo()));</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Long-Method-代码的坏味道&quot;&gt;&lt;a href=&quot;#Long-Method-代码的坏味道&quot; class=&quot;headerlink&quot; title=&quot;Long Method (代码的坏味道)&quot;&gt;&lt;/a&gt;Long Method (代码的坏味道)&lt;/h2&gt;&lt;ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux IO模型</title>
    <link href="http://blog.psonlyweb.cn/2019/03/22/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/Linux%20IO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://blog.psonlyweb.cn/2019/03/22/网络基础/Linux IO模型/</id>
    <published>2019-03-22T02:26:05.000Z</published>
    <updated>2019-03-22T07:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>#概念说明</p><ul><li>用户空间和内核空间</li><li>进程切换</li><li>进程堵塞</li><li>文件描述符</li><li>缓存IO</li></ul><h3 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h3><p>操作系统的核心是内核，独立于普通应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保存内核的安全，操作系统将虚拟空间划分为两部分，一部分是内核空间，一部分为用户空间。</p><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。</p><h3 id="进程堵塞"><a href="#进程堵塞" class="headerlink" title="进程堵塞"></a>进程堵塞</h3><p>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。<strong>当进程进入阻塞状态，是不占用CPU资源的。</strong></p><h3 id="文件描述符fd"><a href="#文件描述符fd" class="headerlink" title="文件描述符fd"></a>文件描述符fd</h3><p>文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念</p><h3 id="缓存IO"><a href="#缓存IO" class="headerlink" title="缓存IO"></a>缓存IO</h3><p>缓存IO又被称作标准IO，大部分文件系统默认的IO操作都是缓存IO。数据会被先拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。</p><h1 id="Linux-IO模型"><a href="#Linux-IO模型" class="headerlink" title="Linux IO模型"></a>Linux IO模型</h1><p>网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。<br>常见的IO模型有阻塞、非阻塞、IO多路复用，异步</p><h3 id="同步阻塞IO"><a href="#同步阻塞IO" class="headerlink" title="同步阻塞IO"></a>同步阻塞IO</h3><p>同步阻塞 IO 模型是最常用的一个模型，也是最简单的模型。在linux中，默认情况下所有的socket都是blocking。它符合人们最常见的思考逻辑。阻塞就是进程 “被” 休息, CPU处理其它进程去了。</p><h3 id="同步非堵塞IO"><a href="#同步非堵塞IO" class="headerlink" title="同步非堵塞IO"></a>同步非堵塞IO</h3><p>同步非阻塞就是 “每隔一会儿瞄一眼进度条” 的轮询（polling）方式。</p><blockquote><p>对比同步阻塞IO<br>优点：能够在等待任务完成的时间里干其他活了（包括提交其他任务，也就是 “后台” 可以有多个任务在同时执行）。<br>缺点：任务完成的响应延迟增大了，因为每过一段时间才去轮询一次read操作，而任务可能在两次轮询之间的任意时间完成。这会导致整体数据吞吐量的降低。</p></blockquote><h3 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h3><p>IO多路复用是指内核一旦发现进程指定的一个或者多个IO条件准备读取，它就通知该进程。<br>当需要同时处理多个客户端接入请求时，可以利用多线程或者IO多路复用技术进行处理。IO多路复用的最大优势就是系统开销小，系统不需要额外创建进程或者线程，也不需要维护这些进程和线程的运行，降底了系统的维护工作量，节省了系统资源。</p><h2 id="异步非阻塞-IO"><a href="#异步非阻塞-IO" class="headerlink" title="异步非阻塞 IO"></a>异步非阻塞 IO</h2><p>相对于同步IO，异步IO不是顺序执行。用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情。等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。IO两个阶段，进程都是非阻塞的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#概念说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户空间和内核空间&lt;/li&gt;
&lt;li&gt;进程切换&lt;/li&gt;
&lt;li&gt;进程堵塞&lt;/li&gt;
&lt;li&gt;文件描述符&lt;/li&gt;
&lt;li&gt;缓存IO&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用户空间和内核空间&quot;&gt;&lt;a href=&quot;#用户空间和内核空间&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈微服务架构</title>
    <link href="http://blog.psonlyweb.cn/2019/03/21/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    <id>http://blog.psonlyweb.cn/2019/03/21/微服务/浅谈微服务架构/</id>
    <published>2019-03-21T07:43:22.000Z</published>
    <updated>2019-04-15T08:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微服务组成部分"><a href="#微服务组成部分" class="headerlink" title="微服务组成部分"></a>微服务组成部分</h2><ul><li>服务描述</li><li>注册中心</li><li>服务框架</li><li>服务监控</li><li>服务追踪</li><li>服务治理</li></ul><p>###服务描述<br>常见的服务描述方式包括RESTful API、XML配置以及IDL文件三种。</p><ul><li>RESTful API方式通常用于HTTP协议的服务描述</li><li>XML配置方式多用作RPC协议的服务描述，通过*.xml配置文件来定义接口名、参数以及返回值类型等。</li><li>IDL文件方式通常用作Thrift和gRPC这类跨语言服务调用框架</li></ul><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><p>服务提供者将自己提供的服务以及地址登记到注册中心，服务消费者则从注册中心查询所需要调用的服务的地址，然后发起请求。</p><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>服务提供者在启动时，根据服务发布文件中配置的发布信息向注册中心注册自己的服务。</li><li>服务消费者在启动时，根据消费者配置文件中配置的服务信息向注册中心订阅自己所需要的服务。</li><li>注册中心返回服务提供者地址列表给服务消费者。</li><li>当服务提供者发生变化，比如有节点新增或者销毁，注册中心将变更通知给服务消费者。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="media/15531617319176.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="服务框架"><a href="#服务框架" class="headerlink" title="服务框架"></a>服务框架</h3><p>服务消费者从注册中心获取服务提供者的地址，有了地址就可以发起调用。</p><ul><li>服务通信采用协议的选择？ TCP、UDP or HTTP协议</li><li>数据传输采用方式？ 同步 or 异步 单连接传输 or 多路复用 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微服务组成部分&quot;&gt;&lt;a href=&quot;#微服务组成部分&quot; class=&quot;headerlink&quot; title=&quot;微服务组成部分&quot;&gt;&lt;/a&gt;微服务组成部分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;服务描述&lt;/li&gt;
&lt;li&gt;注册中心&lt;/li&gt;
&lt;li&gt;服务框架&lt;/li&gt;
&lt;li&gt;服务
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>什么是单体应用</title>
    <link href="http://blog.psonlyweb.cn/2019/03/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8/"/>
    <id>http://blog.psonlyweb.cn/2019/03/12/微服务/什么是单体应用/</id>
    <published>2019-03-12T08:37:33.000Z</published>
    <updated>2019-03-21T07:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="什么是单体应用"><a href="#什么是单体应用" class="headerlink" title="什么是单体应用"></a>什么是单体应用</h3><p>一个归档包包含所有功能的应用程序，比如一些LAMP（Linux+Apache+MySQL+PHP）+和MVC（Spring + iBatis/Hibernate + Tomcat）两大流派。</p><h3 id="单体应用架构图"><a href="#单体应用架构图" class="headerlink" title="单体应用架构图"></a>单体应用架构图</h3><p>###单体应用出现的问题</p><ol><li>部署效率低下：单体应用代码和依赖的资源越来越多，应用打包和部署测试，耗时久。</li><li>团队协作开发成本高：</li><li>系统高可用差</li></ol><h3 id="服务化拆分的两种姿势"><a href="#服务化拆分的两种姿势" class="headerlink" title="服务化拆分的两种姿势"></a>服务化拆分的两种姿势</h3><ol><li>纵向拆分，是从业务维度进行拆分。标准是按照业务的关联程度来决定，关联比较密切的业务适合拆分为一个微服务，而功能相对比较独立的业务适合单独拆分为一个微服务。</li><li>横向拆分，是从公共且独立功能维度拆分。标准是按照是否有公共的被多个其他服务调用，且依赖的资源独立不与其他业务耦合。</li></ol><h3 id="服务化拆分的前置条件"><a href="#服务化拆分的前置条件" class="headerlink" title="服务化拆分的前置条件"></a>服务化拆分的前置条件</h3><blockquote><p><strong>服务如何定义？</strong><br>对于单体应用来说，不同功能模块之前相互交互时，通常是以类库的方式来提供各个模块的功能。对于微服务来说，每个服务都运行在各自的进程之中，应该以何种形式向外界传达自己的信息呢？答案就是接口，无论采用哪种通讯协议，是HTTP还是RPC，服务之间的调用都通过接口描述来约定，约定内容包括接口名、接口参数以及接口返回值 </p><p><strong>服务如何发布和订阅</strong><br>单体应用由于部署在同一个WAR包里，接口之间的调用属于进程内的调用。而拆分为微服务独立部署后，服务提供者该如何对外暴露自己的地址，服务调用者该如何查询所需要调用的服务的地址呢？这个时候你就需要一个类似登记处的地方，能够记录每个服务提供者的地址以供服务调用者查询，在微服务架构里，这个地方就是注册中心。</p><p><strong>服务如何监控</strong><br>通常对于一个服务，我们最关心的是QPS（调用量）、AvgTime（平均耗时）以及P999（99.9%的请求性能在多少毫秒以内）这些指标。这时候你就需要一种通用的监控方案，能够覆盖业务埋点、数据收集、数据处理，最后到数据展示的全链路功能。</p><p><strong>服务如何治理</strong><br>可以想象，拆分为微服务架构后，服务的数量变多了，依赖关系也变复杂了。比如一个服务的性能有问题时，依赖的服务都势必会受到影响。可以设定一个调用性能阈值，如果一段时间内一直超过这个值，那么依赖服务的调用可以直接返回，这就是熔断，也是服务治理最常用的手段之一。</p><p><strong>故障如何定位</strong><br>在单体应用拆分为微服务之后，一次用户调用可能依赖多个服务，每个服务又部署在不同的节点上，如果用户调用出现问题，你需要有一种解决方案能够将一次用户请求进行标记，并在多个依赖的服务系统中继续传递，以便串联所有路径，从而进行故障定位。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;h3 id=&quot;什么是单体应用&quot;&gt;&lt;a href=&quot;#什么是单体应用&quot; class=&quot;headerlink&quot; title=&quot;什么是单体应用&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>委托模式</title>
    <link href="http://blog.psonlyweb.cn/2019/01/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.psonlyweb.cn/2019/01/17/设计模式/委托模式/</id>
    <published>2019-01-17T03:22:53.000Z</published>
    <updated>2019-01-18T06:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>通过分配或委托至其他对象，委托模式能够去除核心对象中的判决和复杂的功能性。</p><h3 id="实现场景"><a href="#实现场景" class="headerlink" title="实现场景"></a>实现场景</h3><p>添加音乐、并且根据音乐类型获取不同的音乐列表（返回字段形式均不一样）</p><h3 id="使用委托模式-VS-基本实现-（UML）"><a href="#使用委托模式-VS-基本实现-（UML）" class="headerlink" title="使用委托模式 VS 基本实现 （UML）"></a>使用委托模式 VS 基本实现 （UML）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>使用基本实现方式调用时，需要if-else的判断，并且音乐类型不断增加，会导致PlayList类无限扩大。但是使用委托模式，在初始化类时，已经声明音乐类型$type,例如M3U，根据类型找到M3UPlaySong类，其余的查询列表均在委托类中进行实现。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><pre><code>&lt;?phpclass Playlist{    private $_song;    public function __construct()    {        $this-&gt;_song = [];    }    public function addSong($location, $title)    {        $song = [&#39;loc&#39;=&gt;$location,&#39;title&#39;=&gt;$title];        $this-&gt;_song[] = $song;    }    public function getM3UList() {        $m3u = &quot;#M3U#\n&quot;;        foreach ($this-&gt;_song as $song) {            $m3u .= &quot;音乐位置&quot;.$song[&#39;loc&#39;];            $m3u .= &quot;音乐名称&quot;.$song[&#39;title&#39;];        }        return $m3u;    }    public function getPLSList() {        $m3u = &quot;#PLS#\n&quot;;        foreach ($this-&gt;_song as $song) {            $m3u .= &quot;music loc&quot;.$song[&#39;loc&#39;];            $m3u .= &quot;music title&quot;.$song[&#39;title&#39;];        }        return $m3u;    }}$obj = new Playlist();$obj-&gt;addSong(&#39;ssss&#39;,&#39;every&#39;);$obj-&gt;addSong(&#39;dsdsda&#39;,&#39;one&#39;);$ext = &#39;m3u&#39;;if ($ext == &#39;m3u&#39;) {    var_dump($obj-&gt;getM3UList());} else {    var_dump($obj-&gt;getPLSList());}echo &quot;\n&quot;;class NewPlaySong {    private $_song;    private $_SongType;    public function __construct($type)    {         $this-&gt;_song =[];         $song_type = strtoupper($type).&#39;PlaySong&#39;;         $this-&gt;_SongType = new $song_type ();    }    public function addSong($location, $title)    {        $song = [&#39;loc&#39;=&gt;$location,&#39;title&#39;=&gt;$title];        $this-&gt;_song[] = $song;    }    public function getPlayList() {        $play_list = $this-&gt;_SongType-&gt;getPlayList($this-&gt;_song);        return $play_list;    }}class M3UPlaySong {    public function getPlayList($song_list) {        $m3u = &quot;#M3U#\n&quot;;        foreach ($song_list as $song) {            $m3u .= &quot;音乐位置&quot;.$song[&#39;loc&#39;];            $m3u .= &quot;音乐名称&quot;.$song[&#39;title&#39;];        }        return $m3u;    }}$obj = new NewPlaySong(&#39;m3u&#39;);$obj-&gt;addSong(&#39;ssss&#39;,&#39;every&#39;);$obj-&gt;addSong(&#39;dsdsda&#39;,&#39;one&#39;);var_dump($obj-&gt;getPlayList());</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;通过分配或委托至其他对象，委托模式能够去除核心对象中的判决和复杂的功能性。&lt;/p&gt;
&lt;h3 id=&quot;实现场景&quot;&gt;&lt;a href=&quot;#实现场景
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="委托模式" scheme="http://blog.psonlyweb.cn/tags/%E5%A7%94%E6%89%98%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式（Adapter Design Pattern）</title>
    <link href="http://blog.psonlyweb.cn/2019/01/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.psonlyweb.cn/2019/01/10/设计模式/适配器模式/</id>
    <published>2019-01-10T09:00:45.000Z</published>
    <updated>2019-01-10T10:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>适配器设计模式只是将某个对象的接口适配为另一个对象所期望的接口。</p><h3 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/19-1-10/65425576.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>###代码实现</p><pre><code>class errorObject{    private $_error;    public function __construct($error)    {        $this-&gt;_error = $error;    }    public function getError() {        return $this-&gt;_error;    }}class LogToCsvErrorObject extends  errorObject{    private $error_num;    private $error_msg;    public function __construct($error)    {        parent::__construct($error);        $error = $this-&gt;getError();        $parts = explode(&quot;:&quot;,$error);        $this-&gt;error_num = $parts[0];        $this-&gt;error_msg = $parts[1];    }    public function getErrorNum() {        return $this-&gt;error_num;    }    public function getErrorMsg() {        return $this-&gt;error_msg;    }}class LogToConsole {    private $_errorObject;    public function __construct(errorObject $errorObject)    {        $this-&gt;_errorObject = $errorObject;    }    public function write() {        fwrite(STDERR,$this-&gt;_errorObject-&gt;getError());    }}class LogToCSV {    private $_errorObject;    public function __construct(LogToCsvErrorObject $errorObject)    {        $this-&gt;_errorObject = $errorObject;    }    public function write() {        $error_num = $this-&gt;_errorObject-&gt;getErrorNum();        $error_msg = $this-&gt;_errorObject-&gt;getErrorMsg();        fwrite(STDERR,$error_msg.&quot;错误码:&quot;.$error_num);    }}$error_obj = new LogToCsvErrorObject(&quot;404:NOT FOUND&quot;);(new LogToCSV($error_obj))-&gt;write();</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;适配器设计模式只是将某个对象的接口适配为另一个对象所期望的接口。&lt;/p&gt;
&lt;h3 id=&quot;UML图&quot;&gt;&lt;a href=&quot;#UML图&quot; cla
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="适配器模式" scheme="http://blog.psonlyweb.cn/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://blog.psonlyweb.cn/2018/05/14/%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.psonlyweb.cn/2018/05/14/算法/快速排序/</id>
    <published>2018-05-14T06:55:18.000Z</published>
    <updated>2018-05-14T09:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>快速排序基于分治思想来实现。</p><ol><li><strong>分解</strong>：数组A[start,end]被划分为两个（可能为空）子数组A[start,postion-1]和A[postion+1,end]中的,使A[start,postion-1]的每一个元素都小于等于A[postion],A[postion+1,end]的每一个元素都大于等于A[postion]。</li><li><strong>解决</strong>：通过递归调用快速排序，对子数组A[start,postion-1]和A[postion+1,end]进行排序。</li><li><strong>合并</strong>：因为数组是原址排序，因此A[start,end]是有序的。</li></ol><h4 id="数组的划分（解决）实现思想图"><a href="#数组的划分（解决）实现思想图" class="headerlink" title="数组的划分（解决）实现思想图"></a>数组的划分（解决）实现思想图</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-14/60412907.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="PHP实现快速排序"><a href="#PHP实现快速排序" class="headerlink" title="PHP实现快速排序"></a>PHP实现快速排序</h4><pre><code>function quickSort(&amp;$array,$start,$end){    if ($start &lt; $end) {        $postion = partition($array, $start, $end);        quickSort($array,$start,$postion-1);        quickSort($array,$postion+1,$end);    }}function partition(&amp;$arr,$start,$end) {    $flag = $arr[$end];    $i = $start-1;    for ( $j=$start; $j&lt;= $end-1; $j++) {        if($arr[$j] &lt;= $flag) {            $i = $i+1;            swap($arr,$i,$j);        }    }    swap($arr,$i+1,$end);    return $i+1;}function swap (&amp;$arr,$exist,$replace) {    $temp = $arr[$exist];    $arr[$exist] = $arr[$replace];    $arr[$replace] = $temp;}$array = array(1,6,5,4);quickSort($array,0,3);var_dump($array);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;快速排序基于分治思想来实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分解&lt;/strong&gt;：数组A[start,end]被划分为两个（可
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.psonlyweb.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://blog.psonlyweb.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>优先队列(PriorityQueue)</title>
    <link href="http://blog.psonlyweb.cn/2018/05/08/%E7%AE%97%E6%B3%95/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97PriorityQueue/"/>
    <id>http://blog.psonlyweb.cn/2018/05/08/算法/优先队列PriorityQueue/</id>
    <published>2018-05-08T03:53:16.000Z</published>
    <updated>2018-05-10T10:10:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>优先队列（priority queue）是一种用来维护由一组元素构成的集合S的数据结构，其中每一个元素都有一个相关的值，称为关键字（key）。<br><strong>队列的定义</strong><br>队列属于先进先出型，Frist in Frist out（FIFO）<br>优先队列基于堆排序的方法进行实现的，堆排序每次都要进行建立最大堆，第一个元素为整个队列中的最大值，优先队列也是利用了堆排序这个性质达到优先队列中权值最大的先出的效果。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-4/77248587.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="优先队列的方法"><a href="#优先队列的方法" class="headerlink" title="优先队列的方法"></a>优先队列的方法</h4><ol><li>HeapMaximum方法实现了返回最大值</li><li>HeapExtractMax方法实现删除队列中的最大值并返回最大值</li><li>HeapIncreaseKey方法实现更改某个值。</li><li>MaxHeapInsert方法实现将元素插入到队列队尾</li></ol><h4 id="PHP实现优先队列"><a href="#PHP实现优先队列" class="headerlink" title="PHP实现优先队列"></a>PHP实现优先队列</h4><pre><code>    public function HeapMaximum($arr) {        return $arr[0];    }    public function HeapExtractMax(&amp;$arr,$length) {        if($length &lt; 1) {            return false;        }        $max = $arr[0];        $arr[0] = $arr[$length-1];        $length = $length - 1;        $this-&gt;MaxHeapify($arr,1,$length);        return $max;    }    public function HeapIncreaseKey(&amp;$arr,$i,$key) {        if ($key &lt; $arr[$i]) {            return false;        }        $arr[$i] = $key;        $flag = $this-&gt;parent($i);        while ($i &gt; 1 &amp;&amp; $arr[$flag] &lt; $arr[$i]) {            $this-&gt;swap($arr,$flag,$i);            $i = $this-&gt;parent($i);        }    }    public function MaxHeapInsert(&amp;$arr,$key) {        $length = count($arr) + 1;        $arr[$length] = 0;        $this-&gt;HeapIncreaseKey($arr,$length,$key);    }</code></pre><h4 id="基于堆排序的PHP的部分代码"><a href="#基于堆排序的PHP的部分代码" class="headerlink" title="基于堆排序的PHP的部分代码"></a>基于堆排序的PHP的部分代码</h4><pre><code>class PriorityQueue{    public function __construct(&amp;$arr) {            $arr_length = count($arr)-1;            $this-&gt;BuildMaxHeap($arr,$arr_length);    }    public function BuildMaxHeap(&amp;$arr,$arr_length) {            $count = count($arr)-1;            for ($i = floor($count/2); $i &gt;=0; $i--) {                $this-&gt;MaxHeapify($arr,$i,$arr_length);            }    }    public function MaxHeapify(&amp;$arr,$i,$arr_length) {        $left = $this-&gt;left($i);        $right = $this-&gt;right($i);        if($left &lt;= $arr_length &amp;&amp; $arr[$left] &gt;= $arr[$i]) {            $this-&gt;swap($arr,$i,$left);            $largest = $left;        } else {            $largest = $i;        }        if ($right &lt;= $arr_length &amp;&amp; $arr[$right] &gt;= $arr[$largest]) {            $this-&gt;swap($arr,$largest,$right);            $largest = $right;        }        if ($largest != $i) {            $this-&gt;MaxHeapify($arr,$largest);        }    }    public function swap(&amp;$arr,$exist,$largest) {        $temp = $arr[$exist];        $arr[$exist] = $arr[$largest];        $arr[$largest] = $temp;    }    private function left($i) {        return 2*$i+1;    }    private function right($i) {        return 2*$i+2;    }    private  function parent($i) {        return floor($i/2);    }    //以下是队列操作}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;优先队列（priority queue）是一种用来维护由一组元素构成的集合S的数据结构，其中每一个元素都有一个相关的值，称为关键字（key）
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.psonlyweb.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="队列" scheme="http://blog.psonlyweb.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>网络分层TCP/IP</title>
    <link href="http://blog.psonlyweb.cn/2018/05/07/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82TCP-IP/"/>
    <id>http://blog.psonlyweb.cn/2018/05/07/网络基础/网络分层TCP-IP/</id>
    <published>2018-05-07T02:41:46.000Z</published>
    <updated>2018-05-07T10:55:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>互联网分为五层，自下而上分为应用层、传输层、网络层、链接层、实体层。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-7/33785501.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h4 id="实体层"><a href="#实体层" class="headerlink" title="实体层"></a>实体层</h4><p>实体层就是把电脑连接在一起的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</p><h4 id="链接层"><a href="#链接层" class="headerlink" title="链接层"></a>链接层</h4><p>拥有唯一的MAC地址进行标识，有了数据包和网卡MAC地址、广播的发送方式，链路层就可以在多台计算机之间传送数据。</p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>网络层关心的是如何把一个数据从一台设备发送到另一台设备。是主机到主机之间的通信。</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>有了MAC地址和IP地址，我们可以在互联网任意两个主机上建立通信。区分一台主机中的接收的数据包属于哪个程序使用，是靠端口判断的。传输层的功能是从端口到端口的通信。因此Unix系统就把主机和端口叫作套接字(socket)</p><h5 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h5><p>UDP数据包，也是由”标头”和”数据”两部分组成。<br>“标头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的”数据”部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-7/2213727.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h5 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h5><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性差，一旦数据发出后，无法知道对方是否收到。<br>为了解决这个问题，TCP协议诞生。TCP协议可以理解为有确认机制的UDP协议。如果发送一个数据包遗失，就收不到确认，发送方就知道有必要重新发送数据包。<br>而且TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络效率通常TCP数据包的长度不会超过IP数据包长度，以保证单个TCP数据包不被分割。</p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>应用层的作用就是规定应用程序的数据格式。<br>TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP。必须有不同的协议规定电子邮件、网页、FTP数据格式，这些应用程序协议构成了“应用层”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;互联网分为五层，自下而上分为应用层、传输层、网络层、链接层、实体层。&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
  
      
    
    </summary>
    
      <category term="计算机网络" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP/IP" scheme="http://blog.psonlyweb.cn/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="http://blog.psonlyweb.cn/2018/05/04/%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.psonlyweb.cn/2018/05/04/算法/堆排序/</id>
    <published>2018-05-04T03:06:56.000Z</published>
    <updated>2018-05-04T09:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="堆排序概念"><a href="#堆排序概念" class="headerlink" title="堆排序概念"></a>堆排序概念</h3><p>堆排序是利用堆这种数据结构而设计的一种排序算法。时间复杂度为O(nlogn)。</p><blockquote><p>堆排序具有如下性质的完全二叉树:每个节点的值都大于或等于其左右孩子节点的值，称为最大堆；或每个节点都小于或者等于其左右孩子节点被称为最小堆。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-4/77248587.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>对堆中的节点进行编号，将这种逻辑映射到数组中，如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-4/48665903.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>堆排序的基本性质：<br>最大堆：左右子节点小于父节点<br>最小堆：左右子节点大于父节点</p><h3 id="堆排序流程"><a href="#堆排序流程" class="headerlink" title="堆排序流程"></a>堆排序流程</h3><p>1.<strong>构建最大堆</strong><br><strong>构建最大堆之前呈现效果如下</strong>：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-4/33025115.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><strong>构建最大堆之后呈现效果如下：</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-4/90896261.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>保证了堆排序中的最大堆的性质。<br>2.<strong>堆排序算法实现</strong><br>取出构建最大堆中的最大值，放在尾部<br>然后重新构建最大堆。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ps-blog.oss-cn-beijing.aliyuncs.com/18-5-4/97733012.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>以此类推最终达到从小到大的排序效果，完成堆排序。</p><h3 id="PHP实现堆排序"><a href="#PHP实现堆排序" class="headerlink" title="PHP实现堆排序"></a>PHP实现堆排序</h3><pre><code>&lt;?php    /**    *     */    class HeapSort     {        public function __construct(&amp;$arr) {            $arr_length = count($arr)-1;            $this-&gt;HeapMaxSort($arr,$arr_length);        }        private function HeapMaxSort(&amp;$arr,$arr_length) {;            $this-&gt;BuildMaxHeap($arr,$arr_length);            for($i = $arr_length;$i &gt;= 0; $i--) {                $this-&gt;swap($arr,$i,0);                $arr_length--;                $this-&gt;MaxHeapify($arr,0,$arr_length);            }        }        private function BuildMaxHeap(&amp;$arr,$arr_length) {            $count = count($arr)-1;            for ($i = floor($count/2); $i &gt;=0; $i--) {                $this-&gt;MaxHeapify($arr,$i,$arr_length);            }        }    public function MaxHeapify(&amp;$arr,$i,$arr_length) {            $left = $this-&gt;left($i);            $right = $this-&gt;right($i);            if($left &lt;= $arr_length &amp;&amp; $arr[$left] &gt;= $arr[$i]) {                $this-&gt;swap($arr,$i,$left);                $largest = $left;            } else {                $largest = $i;            }            if ($right &lt;= $arr_length &amp;&amp; $arr[$right] &gt;= $arr[$largest]) {                $this-&gt;swap($arr,$largest,$right);            $largest = $right;            }            if ($largest != $i) {                $this-&gt;MaxHeapify($arr,$largest);            }        }        public function swap(&amp;$arr,$exist,$largest) {            $temp = $arr[$exist];            $arr[$exist] = $arr[$largest];            $arr[$largest] = $temp;        }        private function left($i) {            return 2*$i+1;        }        private function right($i) {            return 2*$i+2;        }    }    $array = array(5,2,3,1,4,6);    $Heap_Model = new HeapSort($array);    var_dump($array);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;堆排序概念&quot;&gt;&lt;a href=&quot;#堆排序概念&quot; class=&quot;headerlink&quot; title=&quot;堆排序概念&quot;&gt;&lt;/a&gt;堆排序概念&lt;/h3&gt;&lt;p&gt;堆排序是利用堆这种数据结构而设计的一种排序算法。时间复杂度为O(nlogn)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.psonlyweb.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://blog.psonlyweb.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>最大子数组</title>
    <link href="http://blog.psonlyweb.cn/2018/04/26/%E7%AE%97%E6%B3%95/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://blog.psonlyweb.cn/2018/04/26/算法/最大子数组/</id>
    <published>2018-04-26T09:47:41.000Z</published>
    <updated>2018-05-03T08:49:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="暴力求解最大子数组"><a href="#暴力求解最大子数组" class="headerlink" title="暴力求解最大子数组"></a>暴力求解最大子数组</h3><pre><code>function violentMax($array,$count,&amp;$start,&amp;$end) {    $sum = 0;    $max = 0;    for($i=0; $i &lt;= $count-1; $i++) {        for ($j = $i; $j &lt;= $count-1 ; $j++) {             $sum = 0;            for($k = $i; $k &lt;= $j; $k++) {                $sum += $array[$k];            }            if ($sum &gt; $max) {                $start = $i;                $end = $j;                $max = $sum;            }        }    }    return $max;}$array = array(3,-1,2,5,-3,4,-6,-7,1,8,-3,5,9);$count = count($array);$start = 0;$end = 0;$max = violentMax($array,$count,$start,$end);echo &#39;&lt;hr&gt;&#39;;echo $start;echo &#39;&lt;hr&gt;&#39;;echo $end;echo &#39;&lt;hr&gt;&#39;;echo $max;</code></pre><p>上面方法的时间复杂度为O( n^2 );</p><h3 id="分治策略实现最大子数组"><a href="#分治策略实现最大子数组" class="headerlink" title="分治策略实现最大子数组"></a>分治策略实现最大子数组</h3><pre><code>&lt;?phpclass divideRule {    public $left_pos;    public $right_pos;    public function divide($arr,$start,$end) {        if ($start == $end) {            return $arr[$start];        } else {            $mid = floor(($start+$end)/2);            $left_max = $this-&gt;divide($arr,$start,$mid);            $right_max = $this-&gt;divide($arr,$mid+1,$end);            $middle_max = $this-&gt;middleMax($arr,$start,$mid,$end);            if ($left_max &gt;= $right_max &amp;&amp; $left_max &gt;= $middle_max) {                return $left_max;            } else if($right_max &gt;= $left_max &amp;&amp; $right_max &gt;= $middle_max) {                return $right_max;            } else {                return $middle_max;            }        }    }    public function middleMax($arr,$start,$mid,$end) {        $left_sum = 0;        $sum = 0;        for($i = $mid; $i &gt;= 0; $i--) {            $sum = $sum + $arr[$i];            if ($sum &gt; $left_sum) {                $left_sum = $sum;                $this-&gt;left_pos = $i;            }        }        $right_sum = 0;        $sum = 0;        for ($j = $mid+1; $j &lt;= $end ; $j++) {             $sum = $sum + $arr[$j];            if ($sum &gt; $right_sum) {                $right_sum = $sum;                $this-&gt;right_pos = $j;            }        }        $count_sum = $right_sum + $left_sum;        return $count_sum;    }}$array = array(3,-1,2,5,-3,4,-6,-7,1,8,-3,5,9);$count = count($array)-1;$rule_class = new divideRule();$max = $rule_class-&gt;divide($array,0,$count);echo $rule_class-&gt;left_pos;echo $rule_class-&gt;right_pos;var_dump($max);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;暴力求解最大子数组&quot;&gt;&lt;a href=&quot;#暴力求解最大子数组&quot; class=&quot;headerlink&quot; title=&quot;暴力求解最大子数组&quot;&gt;&lt;/a&gt;暴力求解最大子数组&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;function violentMax($array,$count,
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.psonlyweb.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="最大子数组" scheme="http://blog.psonlyweb.cn/tags/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="http://blog.psonlyweb.cn/2018/04/25/%E7%AE%97%E6%B3%95/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.psonlyweb.cn/2018/04/25/算法/归并排序/</id>
    <published>2018-04-25T03:27:46.000Z</published>
    <updated>2018-06-03T05:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP实现归并排序算法"><a href="#PHP实现归并排序算法" class="headerlink" title="PHP实现归并排序算法"></a>PHP实现归并排序算法</h3><pre><code>&lt;?php    function merger_sort(&amp;$arr,$frist,$end) {        if($frist &lt; $end) {            $middle = floor(($frist+$end)/2);            merger_sort($arr,$frist,$middle);            merger_sort($arr,$middle+1,$end);            merger($arr,$frist,$middle,$end);        }    }    function merger(&amp;$arr,$start,$mid,$end) {        $i = $start;        $j=$mid + 1;        $k = $start;        $temparr = array();        while($i!=$mid+1 &amp;&amp; $j!=$end+1)        {           if($arr[$i] &gt;= $arr[$j]){               $temparr[$k++] = $arr[$j++];           }           else{               $temparr[$k++] = $arr[$i++];           }        }        while($i != $mid+1){            $temparr[$k++] = $arr[$i++];        }        while($j != $end+1){            $temparr[$k++] = $arr[$j++];        }        for($i=$start; $i&lt;=$end; $i++){            $arr[$i] = $temparr[$i];        }    }    function MergeSort(&amp;$arr){        $start = 0;        $end = count($arr) - 1;        merger_sort($arr,$start,$end);    }    $array = array(5,2,7,4);    MergeSort($array);    var_dump($array);</code></pre><h3 id="分治策略的步骤"><a href="#分治策略的步骤" class="headerlink" title="分治策略的步骤"></a>分治策略的步骤</h3><ol><li><strong>分解</strong> 原问题为若干个子问题,这些子问题是原问题的规模较小的实例。</li><li><strong>解决</strong> 这些子问题，递归地求解各子问题。然而子问题的规模足够小，则直接求解。</li><li><strong>合并</strong> 这些子问题的解成原问题的解。</li></ol><h3 id="归并排序遵从分治策略"><a href="#归并排序遵从分治策略" class="headerlink" title="归并排序遵从分治策略"></a>归并排序遵从分治策略</h3><ol><li>merger_sort函数完成了分解的步骤，将原数组array(5,2,7,4)最终分解为array(5,2)和array(7,4)</li><li>merger函数完成了解决（排序）和合并的操作首先对分解的array(5,2)和array(7,4)进行排序，得到 array(2,5)和array(4,7),然后合并为array(2,5,4,7),然后继续merge进行解决，流程是将2与4进行比较拿出较小的放在原数组中，然后将4和5进行比较，然后比较5和7，完成归并排序。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>归并排序的时间复杂度是o(nlogn)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PHP实现归并排序算法&quot;&gt;&lt;a href=&quot;#PHP实现归并排序算法&quot; class=&quot;headerlink&quot; title=&quot;PHP实现归并排序算法&quot;&gt;&lt;/a&gt;PHP实现归并排序算法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    function merg
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.psonlyweb.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://blog.psonlyweb.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Socket通信编程</title>
    <link href="http://blog.psonlyweb.cn/2018/02/01/PHP/Socket%E9%80%9A%E4%BF%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://blog.psonlyweb.cn/2018/02/01/PHP/Socket通信编程/</id>
    <published>2018-02-01T09:41:21.000Z</published>
    <updated>2018-02-02T09:01:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>##Socket连接过程</p><ul><li>服务器监听：服务端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</li><li>客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此客户端的套接字必须首先描述它所要连接的服务器的套接字，并给出服务器端的套接字的地址和端口号，然后向服务器端提出连接请求。</li><li>连接确认：当服务器端套接字监听或者接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端的套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接受其他客户端套接字的连接请求。</li></ul><h2 id="PHP安全"><a href="#PHP安全" class="headerlink" title="PHP安全"></a>PHP安全</h2><h6 id="XSS防御"><a href="#XSS防御" class="headerlink" title="XSS防御"></a>XSS防御</h6><ol><li>转义/编码 htmlspecialchars()</li><li>过滤 strip_tags</li><li>CSP(Content Security Policy)</li><li>第三方库<ul><li>HTML purifier</li><li>htmLawed</li><li>Zend_Filter_Input</li></ul></li></ol><h6 id="会话攻击防御"><a href="#会话攻击防御" class="headerlink" title="会话攻击防御"></a>会话攻击防御</h6><ul><li>session_regenerate_id()</li><li>二级令牌</li><li>检测UA和用户IP </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Socket连接过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器监听：服务端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。&lt;/li&gt;
&lt;li&gt;客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此客户端的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP异步并行</title>
    <link href="http://blog.psonlyweb.cn/2018/02/01/PHP/PHP%E5%BC%82%E6%AD%A5%E5%B9%B6%E8%A1%8C/"/>
    <id>http://blog.psonlyweb.cn/2018/02/01/PHP/PHP异步并行/</id>
    <published>2018-02-01T02:33:59.000Z</published>
    <updated>2022-03-25T07:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个PHP-Web程序的执行过程"><a href="#一个PHP-Web程序的执行过程" class="headerlink" title="一个PHP Web程序的执行过程"></a>一个PHP Web程序的执行过程</h2><ol><li>请求开始 (GET/Post/Cookie/Session)</li><li>Mysql数据库查询/Redis查询</li><li>模板渲染输出HTML/json_encode</li><li>请求结束(回收所有内存和资源)</li></ol><h2 id="PHP-FPM进程的完整流程"><a href="#PHP-FPM进程的完整流程" class="headerlink" title="PHP-FPM进程的完整流程"></a>PHP-FPM进程的完整流程</h2><ol><li>请求1 处理请求 发送响应</li><li>请求2 处理请求 发送响应</li><li>请求3 处理请求 发送响应</li><li>。。。。</li></ol><p>Accept-&gt;Recv(处理)-&gt;Send-&gt;Close-&gt;Accept-&gt;Recv-&gt;Send-&gt;Close</p><h3 id="多进程并发地处理请求"><a href="#多进程并发地处理请求" class="headerlink" title="多进程并发地处理请求"></a>多进程并发地处理请求</h3><ul><li>进程1 请求1-&gt;请求2-&gt;……-&gt;请求N</li><li>进程2</li><li>进程3</li><li>…</li><li>进程N</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>stream</li><li>sockets</li><li>libevent/event</li><li>pcntl/posix</li><li>pthread</li><li>sysvsem/sysvmsg</li><li>shmop/sysvshm</li></ol><h2 id="PHP同步阻塞"><a href="#PHP同步阻塞" class="headerlink" title="PHP同步阻塞"></a>PHP同步阻塞</h2><pre><code>$serv = stream_socket_server(&quot;tcp://0.0.0.0:8000&quot;,$errno,$errstr) or die (&quot;服务创建失败&quot;);for ($i=0; $i&lt;32 ;$i++) {    if (pcntl_fork() == 0) {        while(1) {            $conn = stream_socket_accept($serv);            $request = fread($conn);            $response = &quot;Hello 异步并行&quot;;            fwrite($response);            fclose($conn);            }        exit(0);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一个PHP-Web程序的执行过程&quot;&gt;&lt;a href=&quot;#一个PHP-Web程序的执行过程&quot; class=&quot;headerlink&quot; title=&quot;一个PHP Web程序的执行过程&quot;&gt;&lt;/a&gt;一个PHP Web程序的执行过程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;请求开始 (GE
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vagrant使用</title>
    <link href="http://blog.psonlyweb.cn/2018/01/26/Vagrant/"/>
    <id>http://blog.psonlyweb.cn/2018/01/26/Vagrant/</id>
    <published>2018-01-26T08:50:16.000Z</published>
    <updated>2018-01-30T07:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vagrant常用命令"><a href="#Vagrant常用命令" class="headerlink" title="Vagrant常用命令"></a>Vagrant常用命令</h2><ol><li>vagrant box list  查看目前已有的box</li><li>vagrant box add  新增一个box</li><li>vagrant box remove 删除指定的box</li><li>vagrant init 初始化配置vagrantfile</li><li>vagrant up 启动虚拟机</li><li>vagrant ssh ssh登录虚拟机</li><li>vagrant suspend 挂起虚拟机</li><li>vagrant reload 重启虚拟机</li><li>vagrant half 关闭虚拟机</li><li>vagrant status 查看虚拟机状态</li><li>vagrant destroy 删除虚拟机</li></ol><h2 id="对虚拟机的优化"><a href="#对虚拟机的优化" class="headerlink" title="对虚拟机的优化"></a>对虚拟机的优化</h2><blockquote><h2 id="替换源"><a href="#替换源" class="headerlink" title="替换源"></a><strong>替换源</strong></h2><ul><li>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak #备份源文件</li><li>sudo vim /etc/apt/source.list #修改源</li><li>sudo apt-get update #更新列表</li><li>源内容如下：</li></ul></blockquote><pre><code>deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</code></pre><blockquote><h2 id="安装Apache-Nginx-PHP"><a href="#安装Apache-Nginx-PHP" class="headerlink" title="安装Apache Nginx PHP"></a>安装Apache Nginx PHP</h2><p>sudo apt-get install 对应名称<br>对应名称 -v 可以查看版本号</p><h2 id="Apache更改端口，将端口设置为8888"><a href="#Apache更改端口，将端口设置为8888" class="headerlink" title="Apache更改端口，将端口设置为8888"></a>Apache更改端口，将端口设置为8888</h2><ol><li>修改 ports.conf 文件</li><li>curl -I ‘<a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a>‘</li></ol><h2 id="Mysql-安装"><a href="#Mysql-安装" class="headerlink" title="Mysql 安装"></a>Mysql 安装</h2><ol><li>sudo apt-get install mysql-server #服务器端</li><li>安装期间会提示输入为mysql设置root密码，我这边不操作，直接enter 不设置密码</li><li>sudo apt-get install mysql-client #客户端</li><li>mysql -uroot -p #测试连接库，上面安装服务端没有设置密码，这里直接enter进入</li></ol><h2 id="php扩展-sudo-apt-get-install-名称"><a href="#php扩展-sudo-apt-get-install-名称" class="headerlink" title="php扩展 sudo apt-get install 名称"></a>php扩展 sudo apt-get install 名称</h2><ol><li>php5-mcrypt</li><li>php5-mysql</li><li>php5-gd</li></ol><h2 id="支持apache2的php"><a href="#支持apache2的php" class="headerlink" title="支持apache2的php"></a>支持apache2的php</h2><ol><li>sudo apt-get install libapache2-mod-php5</li><li>开启rewrite功能</li><li>sudo a2enmod rewrite<br>支持nginx fastcgi</li></ol><hr><ol><li>sudo apt-get install php5-cgi php5-fpm</li></ol><h2 id="修改成9000端口-，默认sock模式"><a href="#修改成9000端口-，默认sock模式" class="headerlink" title="修改成9000端口 ，默认sock模式"></a>修改成9000端口 ，默认sock模式</h2><ol><li>cd /etc/php5/fpm/pool.d</li><li>sudo vim www.conf # search listen = 127.0.0.1:9000</li><li>sudo /etc/init.d/php5-fpm restart</li></ol></blockquote><p>##Vagrant高级知识</p><ol><li>端口转发 <code>config.vm.network &quot;forwarded_port&quot;, guest: 8888, host: 8889</code></li><li>共享文件夹<code>config.vm.synced_folder &quot;/Users/ps/www&quot;,&quot;/home/www&quot;,:nfs=&gt;true</code></li><li>私有网络设置 <code>config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</code></li></ol><h2 id="虚拟机优化"><a href="#虚拟机优化" class="headerlink" title="虚拟机优化"></a>虚拟机优化</h2><ol><li>虚拟机名称 <code>vb.name = &quot;ubuntu_ps&quot;</code></li><li>虚拟机主机名 <code>config.vm.hostname = &quot;ps&quot;</code></li><li>配置虚拟机内存和CPU<ul><li><code>vb.memory = &quot;1024&quot;</code></li><li><code>vb.cpus = 2</code></li></ul></li></ol><h2 id="打包分发"><a href="#打包分发" class="headerlink" title="打包分发"></a>打包分发</h2><p>1.打包<br>vagrant package –output  xxx.box<br>vagrant package –output  xxx.box –base 虚拟机名称</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vagrant常用命令&quot;&gt;&lt;a href=&quot;#Vagrant常用命令&quot; class=&quot;headerlink&quot; title=&quot;Vagrant常用命令&quot;&gt;&lt;/a&gt;Vagrant常用命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;vagrant box list  查看目前已有的box
      
    
    </summary>
    
      <category term="Linux" scheme="http://blog.psonlyweb.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.psonlyweb.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之装饰器模式</title>
    <link href="http://blog.psonlyweb.cn/2018/01/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.psonlyweb.cn/2018/01/02/设计模式/设计模式之装饰器模式/</id>
    <published>2018-01-02T03:07:36.000Z</published>
    <updated>2018-01-02T03:07:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章类获取初始的文章内容</p></blockquote><pre><code>class Art{    protected $content = null;    public function __construct($content) {        $this-&gt;content = $content;    }    public function decorator() {        return $this-&gt;content;    }}</code></pre><blockquote><p>定义装饰文章类<br>art 参数 保存着 文章类的初始化对象</p></blockquote><pre><code>class ArtDesc extends Art{    protected $art = null;    public function __construct($art)    {        $this-&gt;art = $art;    }    public function decorator() {    }}</code></pre><blockquote><p>SEO类和AD类继承装饰器类达到对文章内容的添加的效果</p></blockquote><pre><code>class SeoArt extends ArtDesc{    public function decorator()    {        return $this-&gt;art-&gt;decorator().&#39;SEO KEYWORDS&#39;;    }}class AdArt extends  ArtDesc {    public function decorator() {        return $this-&gt;art-&gt;decorator().&#39;广告内容&#39;;    }}</code></pre><blockquote><p>调用<br>将初始化文章基础对象 传入装饰器类</p></blockquote><pre><code>$art = new Art(&#39;文章内容&#39;);$art = new SeoArt($art);$art = new AdArt($art);echo $art-&gt;decorator();</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章类获取初始的文章内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class Art
{
    protected $content = null;

    public function __construct($conte
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="PHP" scheme="http://blog.psonlyweb.cn/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://blog.psonlyweb.cn/2018/01/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.psonlyweb.cn/2018/01/02/设计模式/设计模式之策略模式/</id>
    <published>2018-01-02T02:01:34.000Z</published>
    <updated>2018-01-02T02:01:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之策略模式"><a href="#设计模式之策略模式" class="headerlink" title="设计模式之策略模式"></a>设计模式之策略模式</h2><hr><ul><li style="list-style: none"><input type="checkbox" checked> 面向对象中有什么比是什么更灵活 </li><li style="list-style: none"><input type="checkbox" checked> 组合比继承更灵活</li><li style="list-style: none"><input type="checkbox" checked> 饭店和厨师的关系  是 一对多</li><li style="list-style: none"><input type="checkbox" checked> 比如新开饭店 如果单纯的复制饭店 这样不能会造成很多浪费的方法 但是如果以饭店拥有厨师的方式处理 那么 饭店的样式可以随机变换，因此首先声明一个饭店类</li></ul><pre><code>class FD{    protected $tangCreator = null;    protected $caiCreator = null;    protected $fanCreator = null;    public function __construct($f,$c,$t) {        $this-&gt;fanCreator = $f;        $this-&gt;tangCreator = $t;        $this-&gt;caiCreator = $c;    }    public function createFan() {        return $this-&gt;fanCreator-&gt;fan();    }    public function createCai() {        return $this-&gt;caiCreator-&gt;cai();    }    public function createTang() {        return $this-&gt;tangCreator-&gt;tang();    }}</code></pre><p>再声明厨师类</p><pre><code>class SouthDinner {    public function fan() {        return &#39;米饭&#39;;    }    public function cai() {        return &#39;甜食&#39;;    }    public function tang() {        return &#39;蛋花汤&#39;;    }}class NorthDinner {    public function fan() {        return &#39;馒头&#39;;    }    public function cai() {        return &#39;炒菜&#39;;    }    public function tang() {        return &#39;粥&#39;;    }}</code></pre><p>最后调用 </p><pre><code>$fd = new FD(new SouthDinner(),new NorthDinner(),new SouthDinner());echo $fd-&gt;createCai(),&#39;&lt;br&gt;&#39;;echo $fd-&gt;createTang(),&#39;&lt;br&gt;&#39;;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式之策略模式&quot;&gt;&lt;a href=&quot;#设计模式之策略模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之策略模式&quot;&gt;&lt;/a&gt;设计模式之策略模式&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li style=&quot;list-style: none&quot;&gt;&lt;input
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="PHP" scheme="http://blog.psonlyweb.cn/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>“设计模式之责任链”</title>
    <link href="http://blog.psonlyweb.cn/2017/12/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    <id>http://blog.psonlyweb.cn/2017/12/29/设计模式/设计模式之责任链/</id>
    <published>2017-12-29T02:46:16.000Z</published>
    <updated>2017-12-29T02:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之责任链"><a href="#设计模式之责任链" class="headerlink" title="设计模式之责任链"></a>设计模式之责任链</h2><hr><blockquote><p><strong>定义子类</strong><br>首先定义三个类，要声明power权值,以power来判断是否有权利去操作，传过来的数据，还需要声明上一级，责任链模式，要有层级关系</p></blockquote><pre><code>class Banzhu extends Admin{   protected $power = 1;   protected $top = &#39;Police&#39;;   public function doProc() {       echo &#39;删帖&#39;;   }}class Police extends Admin{   protected $power = 2;   protected $top = &#39;Guoan&#39;;   public function doProc() {       echo &#39;抓人&#39;;   }}class Guoan extends Admin{   protected $power = 3;   protected $top = null;   public function doProc() {       echo &#39;灭口&#39;;   }}</code></pre><blockquote><p><strong>定义父类</strong><br>子类均要继承父类方法Admin,Admin的__construct构造方法中，首先判断该类的上一级是否为空,如果是，那么该类是这个责任链中的顶级。</p></blockquote><pre><code>class Admin{  public function __construct() {      if ($this-&gt;top == null) {          return;      }      $this-&gt;toper = new $this-&gt;top();  }  public function proc($danger) {      if($danger &lt;= $this-&gt;power) {          $this-&gt;doProc();      } else {          $this-&gt;toper-&gt;proc($danger);      }  }}</code></pre><blockquote><p><strong>调用</strong><br>实例化最底层类，然后调用方法传入power</p></blockquote><pre><code>$obj = new Banzhu();$obj-&gt;proc(3);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式之责任链&quot;&gt;&lt;a href=&quot;#设计模式之责任链&quot; class=&quot;headerlink&quot; title=&quot;设计模式之责任链&quot;&gt;&lt;/a&gt;设计模式之责任链&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义子类&lt;/strong&gt;&lt;br&gt;首先定
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="PHP" scheme="http://blog.psonlyweb.cn/tags/PHP/"/>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>“设计模式之工厂模式 抽象工厂”</title>
    <link href="http://blog.psonlyweb.cn/2017/12/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%20%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <id>http://blog.psonlyweb.cn/2017/12/26/设计模式/设计模式之工厂模式 抽象工厂/</id>
    <published>2017-12-26T07:59:38.000Z</published>
    <updated>2017-12-26T07:59:38.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设计模式之工厂模式-抽象工厂"><a href="#设计模式之工厂模式-抽象工厂" class="headerlink" title="设计模式之工厂模式 抽象工厂"></a>设计模式之工厂模式 抽象工厂</h4><p>多个类具有相同的属性和方法</p><p>1.首先声明类</p><pre><code>class Mysql{}class Sqlite{}class MyPdo{}</code></pre><p>2.建立一个工厂类接口，工厂类中可以声明属性和方法</p><pre><code>interface Factory {    public static function getDB();}</code></pre><p>3.然后声明抽象工厂类 实现工厂类接口中的静态方法</p><pre><code>class MysqlFactory implements Factory{    public static  function getDB() {        return new Mysql();    }}class MyPdoFactory implements Factory{    public static function getDB()    {        // TODO: Implement getDB() method.        return new MyPdo();    }}class MysqlliteFactory implements Factory{    public static function getDB()    {        // TODO: Implement getDB() method.        return new Sqlite();    }}</code></pre><p>4、最后调用工厂类中的静态方法</p><pre><code>$factory = &#39;MysqlFactory&#39;;$db = $factory::getDB();print_r($db);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设计模式之工厂模式-抽象工厂&quot;&gt;&lt;a href=&quot;#设计模式之工厂模式-抽象工厂&quot; class=&quot;headerlink&quot; title=&quot;设计模式之工厂模式 抽象工厂&quot;&gt;&lt;/a&gt;设计模式之工厂模式 抽象工厂&lt;/h4&gt;&lt;p&gt;多个类具有相同的属性和方法&lt;/p&gt;
&lt;p&gt;1
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="抽象工厂" scheme="http://blog.psonlyweb.cn/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    
  </entry>
  
  <entry>
    <title>“JS设计模式之观察者模式”</title>
    <link href="http://blog.psonlyweb.cn/2017/12/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.psonlyweb.cn/2017/12/26/设计模式/设计模式之观察者模式/</id>
    <published>2017-12-26T07:58:16.000Z</published>
    <updated>2017-12-26T07:58:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之观察者模式"><a href="#设计模式之观察者模式" class="headerlink" title="设计模式之观察者模式"></a>设计模式之观察者模式</h2><hr><pre><code>&lt;script&gt;var sel =document.getElementById(&#39;sel&#39;);    sel.observes =[];    sel.attach =function (obj) {        sel.observes[sel.observes.length] = obj;    };    sel.detach = function (obj) {        for( var i=0; i &lt; sel.observes.length; i++) {            if(this.observes[i] == obj) {                delete this.observes[i];            }        }    };    sel.onchange = sel.notify =function () {        for( var i=0; i &lt; sel.observes.length; i++) {//              this.observes[i].update(this);        }    };    var test2 = document.getElementById(&#39;test2&#39;);    var test3 = document.getElementById(&#39;test3&#39;);    test3.update = function (sel) {        if(sel.value == &#39;1&#39;){            this.innerHTML = &#39;2&#39;;        } else if(sel.value == &#39;0&#39;) {            this.innerHTML =&#39;a&#39;;        }    };    test2.update = function (sel) {        if(sel.value == &#39;1&#39;){            this.innerHTML = &#39;1&#39;;        } else if(sel.value == &#39;0&#39;) {            this.innerHTML =&#39;s&#39;;        }    };    sel.attach(test2);    sel.attach(test3);    &lt;/script&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设计模式之观察者模式&quot;&gt;&lt;a href=&quot;#设计模式之观察者模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之观察者模式&quot;&gt;&lt;/a&gt;设计模式之观察者模式&lt;/h2&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;
var sel =d
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="JS" scheme="http://blog.psonlyweb.cn/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>mysql主从复制</title>
    <link href="http://blog.psonlyweb.cn/2017/12/26/Mysql/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://blog.psonlyweb.cn/2017/12/26/Mysql/mysql主从复制/</id>
    <published>2017-12-26T07:56:16.000Z</published>
    <updated>2017-12-26T07:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h1><hr><h2 id="一、-配置主服务器"><a href="#一、-配置主服务器" class="headerlink" title="一、 配置主服务器"></a>一、 配置主服务器</h2><blockquote><ol><li>编辑my.cnf文件 默认位置一般在/etc下</li></ol></blockquote><p>在[mysqld]的下面加入下面代码：</p><pre><code>log-bin=mysql-binserver-id=1innodb_flush_log_at_trx_commit=1sync_binlog=1binlog-do-db=wordpress//表明备份哪个数据库binlog_ignore_db=mysql //表明忽略mysql库的备份</code></pre><blockquote><p>2.重启mysql </p></blockquote><pre><code> service mysqld restart</code></pre><blockquote><p>3.连接mysql数据库 </p></blockquote><pre><code>    mysql -u root -p</code></pre><blockquote><p>4.在主服务器上创建用户并赋予”REPLICATION SLAVE”权限 x.x.x.x为 从属服务器ip</p></blockquote><ul><li>已授权的方式创建用户</li></ul><pre><code>    GRANT REPLICATION SLAVE    -&gt; ON *.*    -&gt; TO &#39;ps&#39;@&#39;192.168.199.118&#39;    -&gt; IDENTIFIED BY &#39;123456&#39;;</code></pre><blockquote><p>5.执行以下命令锁定数据库以防止写入数据。</p></blockquote><pre><code> mysql&gt;FLUSH TABLES WITH READ LOCK;</code></pre><blockquote><p>6.导出数据库备份文件</p></blockquote><pre><code>mysqldump -u root -p  --databases work  --lock-tables=false &gt; all.sql//lock-tables 是否锁定数据表 //databases 数据库名</code></pre><blockquote><p>7.用scp命令传输数据库文件all.sql到从服务器</p></blockquote><pre><code>scp all.sql root@192.168.199.118:/root</code></pre><ul><li>[注意:] scp命令使用时 主服务器和从服务器都要安装 openssh-clients</li></ul><pre><code>    yum install -y openssh-clients    ssh -v //查看服务器上是否有openssh-clients</code></pre><hr><blockquote><p>8.连接mysql数据库 进入mysql命令行查看master状态</p></blockquote><pre><code>mysql&gt; SHOW MASTER STATUS;+------------------+----------+--------------+------------------+| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |+------------------+----------+--------------+------------------+| mysql-bin.000001 |      260 | work         | mysql            |+------------------+----------+--------------+------------------+</code></pre><blockquote><p>9.解锁数据表</p></blockquote><pre><code>    mysql&gt; UNLOCK TABLES;</code></pre><h2 id="二、-配置从属数据库"><a href="#二、-配置从属数据库" class="headerlink" title="二、 配置从属数据库"></a>二、 配置从属数据库</h2><blockquote><p>1.导入主数据库数据表</p></blockquote><pre><code>mysql -u root -p work &lt; all.sql</code></pre><ul><li>[注释]  &lt; 导入 &gt; 导出</li></ul><blockquote><p>2.编辑my.cnf,在[mysqld]下面加入</p></blockquote><p>server-id=2</p><p>可以自己定义,保证唯一</p><blockquote><p>3.登录mysql服务器，执行以下命令。</p></blockquote><pre><code>mysql&gt; CHANGE MASTER TO    -&gt; MASTER_HOST=&#39;192.168.199.163&#39;,    -&gt; MASTER_USER=&#39;ps&#39;,    -&gt; MASTER_PASSWORD=&#39;123456&#39;,    -&gt; MASTER_PORT=3306,    -&gt; MASTER_LOG_FILE=&#39;mysql-bin.000001&#39;,    -&gt; MASTER_LOG_POS=260,    -&gt; MASTER_CONNECT_RETRY=10;</code></pre><ul><li>[注意:] MASTER_HOST:主服务器的IP。</li><li>MASTER_HOST:主服务器的IP。</li><li>MASTER_USER：配置主服务器时建立的用户名</li><li>MASTER_PASSWORD：用户密码</li><li>MASTER_PORT：主服务器mysql端口，如果未曾修改，默认即可。</li></ul><blockquote><p>4.启动slave进程。</p></blockquote><pre><code>    START SLAVE;//开启SLAVE进程    show slave status\G //查看SLAVE进程状态</code></pre><ul><li>[注意]连接不上mysql数据库 有可能是防火墙的原因 </li></ul><pre><code>service iptables stop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql主从复制&quot;&gt;&lt;a href=&quot;#mysql主从复制&quot; class=&quot;headerlink&quot; title=&quot;mysql主从复制&quot;&gt;&lt;/a&gt;mysql主从复制&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、-配置主服务器&quot;&gt;&lt;a href=&quot;#一、-配置主服务器&quot; 
      
    
    </summary>
    
      <category term="Mysql" scheme="http://blog.psonlyweb.cn/categories/Mysql/"/>
    
    
      <category term="主从复制" scheme="http://blog.psonlyweb.cn/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>“单例模式”</title>
    <link href="http://blog.psonlyweb.cn/2017/12/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.psonlyweb.cn/2017/12/26/设计模式/设计模式之单例模式/</id>
    <published>2017-12-26T07:53:42.000Z</published>
    <updated>2017-12-26T07:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h4><hr><pre><code>&lt;?phpclass Single{    protected  $rnd;    protected static $ins =null ;    //将自动加载 设置为 protected类型    //这样没法new 类名进行实例化    protected function __construct() {        $this-&gt;rnd =rand(0,1000);    }    //声明一个静态方法    public static function getins(){        //判断self::$ins 保存着实例化之后的对象        if (self::$ins == null) {            self::$ins = new self();        }        return self::$ins;    }}?&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设计模式之单例模式&quot;&gt;&lt;a href=&quot;#设计模式之单例模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式之单例模式&quot;&gt;&lt;/a&gt;设计模式之单例模式&lt;/h4&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class Single
{
    p
      
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.psonlyweb.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="http://blog.psonlyweb.cn/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="PHP" scheme="http://blog.psonlyweb.cn/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>编译安装PHP扩展</title>
    <link href="http://blog.psonlyweb.cn/2017/12/26/PHP/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85PHP%E6%89%A9%E5%B1%95/"/>
    <id>http://blog.psonlyweb.cn/2017/12/26/PHP/编译安装PHP扩展/</id>
    <published>2017-12-26T07:30:46.000Z</published>
    <updated>2017-12-26T07:30:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译安装PHP扩展"><a href="#编译安装PHP扩展" class="headerlink" title="编译安装PHP扩展"></a>编译安装PHP扩展</h1><p>1、下载PHP环境安装包 php-7.1.4<br>2、解压php安装包<br><code>tar -zxf php-7.1.4.tar.gz</code><br>3、进入ext和你要安装的扩展的目录<br>4、执行phpize<br><code>/usr/local/php7-bht/bin/phpize</code><br>5、执行编译命令</p><pre><code>./configure --with-php-config=/usr/local/php7-bht/bin/php-config --with-curl=DIR</code></pre><p><strong>ps:</strong> –with-curl 根据安装扩展不同更改</p><p>6、执行</p><pre><code>    make &amp;&amp; make install</code></pre><p>7、然后会生成扩展名.so的文件<br>目录在extensions下</p><pre><code>/usr/local/php7-bht/lib/php/extensions/no-debug-non-zts-20160303/</code></pre><p>8、执行加载模块</p><pre><code>/usr/local/php/bin/php -m |grep curl</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编译安装PHP扩展&quot;&gt;&lt;a href=&quot;#编译安装PHP扩展&quot; class=&quot;headerlink&quot; title=&quot;编译安装PHP扩展&quot;&gt;&lt;/a&gt;编译安装PHP扩展&lt;/h1&gt;&lt;p&gt;1、下载PHP环境安装包 php-7.1.4&lt;br&gt;2、解压php安装包&lt;br&gt;&lt;c
      
    
    </summary>
    
      <category term="编译安装" scheme="http://blog.psonlyweb.cn/categories/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Linux" scheme="http://blog.psonlyweb.cn/tags/Linux/"/>
    
      <category term="PHP扩展" scheme="http://blog.psonlyweb.cn/tags/PHP%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>“插入排序”</title>
    <link href="http://blog.psonlyweb.cn/2017/10/09/%E7%AE%97%E6%B3%95/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.psonlyweb.cn/2017/10/09/算法/插入排序/</id>
    <published>2017-10-09T05:25:11.000Z</published>
    <updated>2018-04-13T11:51:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="PHP实现插入排序算法"><a href="#PHP实现插入排序算法" class="headerlink" title="PHP实现插入排序算法"></a>PHP实现插入排序算法</h3><pre><code>&lt;?phpfunction insert_sort($arr){    for ($i=1;$i&lt;count($arr);$i++){        $key=$arr[$i];        $j=$i-1;        //插入排序判断条件        while($j&gt;=0 &amp;&amp; $arr[$j]&gt;$key){            $arr[$j+1]=$arr[$j];            $j=$j-1;        }        $arr[$j+1]=$key;    }    return $arr;}$arr= array(5,2,4,6,1,3);$arr=insert_sort($arr);var_dump($arr);?&gt;</code></pre><h3 id="循环不变式（理解算法的正确性）"><a href="#循环不变式（理解算法的正确性）" class="headerlink" title="循环不变式（理解算法的正确性）"></a>循环不变式（理解算法的正确性）</h3><p>循环不变式的三条性质：</p><ol><li>初始化：循环的第一次迭代之前，它为真</li><li>保持：如果循环的某次迭代之前他为真，那么下一次迭代之前它仍为真。</li><li>终止：在循环终止时，不变式为我们提供一个有用的性质，该性质是用于证明算法是正确的。<h3 id="利用循环不变式证明插入排序是正确的"><a href="#利用循环不变式证明插入排序是正确的" class="headerlink" title="利用循环不变式证明插入排序是正确的"></a>利用循环不变式证明插入排序是正确的</h3></li><li>初始化:当$i=2时，进入循环，$i=2所在数组元素前只有一个A[1]，因为只有一个元素，那么这个判断之前，该数组一定是有序的。</li><li>保持:第二条性质，当第一次循环执行下来，A[1]与A[2]进行比较，A[1],A[2]按照由小到大进行排列，保持了初始化中的性质，循环到$i为任意值，那么循环过后1-j一定是有序的，保持数组是有序的性质。</li><li>终止：循环终止的条件是i &gt; 数组.length = n,因为每次循环i都会增加1，最终 1-n一定是有序排列的。<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3>插入一个数据之前，所在位置n之前的数据一定是有序排列的。</li></ol><p>插入排序最坏运行时间为n² 最好的运行时间为n 那么该数组一定是有序的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;PHP实现插入排序算法&quot;&gt;&lt;a href=&quot;#PHP实现插入排序算法&quot; class=&quot;headerlink&quot; title=&quot;PHP实现插入排序算法&quot;&gt;&lt;/a&gt;PHP实现插入排序算法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
function insert_s
      
    
    </summary>
    
      <category term="算法" scheme="http://blog.psonlyweb.cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://blog.psonlyweb.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
